(fresh_subs
 (fresh_subs_TCC1 0
  (fresh_subs_TCC1-1 nil 3882713102 ("" (termination-tcc) nil nil) nil
   nil
   (fresh_subs termination
    "fresh_subs.fresh_subs(fresh_subs.Delta)(fresh_subs.sigma, fresh_subs.tail)"
    "nil")))
 (fresh_subs?_TCC1 0
  (fresh_subs?_TCC1-1 nil 3882713102 ("" (termination-tcc) nil nil) nil
   nil
   (fresh_subs? termination
    "fresh_subs.fresh_subs?(fresh_subs.sigma, fresh_subs.tail)"
    "nil")))
 (fresh_subs_character 0
  (fresh_subs_character-1 nil 3885978626
   ("" (induct "Nabla")
    (("1" (grind) nil nil)
     ("2" (grind)
      (("1" (reveal -1)
        (("1" (inst -1 "ax!1") (("1" (assert) nil nil)) nil)) nil)
       ("2" (reveal -1)
        (("2" (inst -1 "ax!1") (("2" (assert) nil nil)) nil)) nil))
      nil))
    nil)
   ((atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" term_adt
       nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs def-decl "term" substitution nil)
    (fresh def-decl "bool" freshness nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil))
   shostak))
 (fresh_subs_append_context 0
  (fresh_subs_append_context-1 nil 3885979445
   ("" (induct "Nabla1") (("1" (grind) nil nil) ("2" (grind) nil nil))
    nil)
   ((atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil))
   shostak))
 (fresh_subs_append_subs 0
  (fresh_subs_append_subs-1 nil 3887398285
   ("" (induct "Nabla")
    (("1" (skeep) (("1" (grind) nil nil)) nil)
     ("2" (skolem 1 ("hd " "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (iff)
            (("2" (inst -1 "Delta" "sigma" "sigma1")
              (("2" (split -1)
                (("1" (prop)
                  (("1" (expand "fresh_subs" -1)
                    (("1" (flatten)
                      (("1" (rewrite "subs_append2" -1)
                        (("1" (expand "fresh_subs" 1)
                          (("1" (assert)
                            (("1" (lemma "subs_no_effect_t")
                              (("1"
                                (inst -1 "sigma1" "(: :) * hd`2")
                                (("1"
                                  (prop)
                                  (("1"
                                    (replace -1)
                                    (("1" (propax) nil nil))
                                    nil)
                                   ("2"
                                    (hide-all-but (-4 1))
                                    (("2"
                                      (expand "disjoint?")
                                      (("2"
                                        (expand "empty?")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst?)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (expand "fresh_subs" -1)
                    (("2" (flatten)
                      (("2" (expand "fresh_subs" 1)
                        (("2" (assert)
                          (("2" (rewrite "subs_append2")
                            (("2" (lemma "subs_no_effect_t")
                              (("2"
                                (inst -1 "sigma1" "(::)*hd`2")
                                (("2"
                                  (prop)
                                  (("1" (assert) nil nil)
                                   ("2"
                                    (hide-all-but (-4 1))
                                    (("2"
                                      (expand "disjoint?")
                                      (("2"
                                        (expand "empty?")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (inst?)
                                            (("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (expand "disjoint?")
                    (("2" (expand "empty?")
                      (("2" (skeep)
                        (("2" (inst?) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_no_effect_t formula-decl nil substitution nil)
    (vars def-decl "finite_set[variable]" term_properties nil)
    (subs_append2 formula-decl nil substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" term_adt
       nil)
    (subs const-decl "term" substitution nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (vars def-decl "finite_set[variable]" freshness nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil))
   shostak))
 (fresh_subs_append_subs2 0
  (fresh_subs_append_subs2-1 nil 3887833727
   ("" (induct "Nabla")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("eq" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "fresh_subs" 1)
            (("2" (inst -1 "Delta" "sigma" "sigma1")
              (("2" (split -1)
                (("1" (replace -1)
                  (("1" (assert)
                    (("1"
                      (case "subs(append(sigma, sigma1))((: :) * eq`2) = subs(sigma1)((: :) * eq`2)")
                      (("1" (replace -1) (("1" (propax) nil nil)) nil)
                       ("2" (hide -1 2)
                        (("2" (rewrite "subs_append2")
                          (("2" (use "subs_no_effect_t")
                            (("2" (assert)
                              (("2"
                                (hide 2)
                                (("2"
                                  (expand "disjoint?")
                                  (("2"
                                    (expand "empty?")
                                    (("2"
                                      (skeep)
                                      (("2"
                                        (inst -2 "x")
                                        (("2"
                                          (expand
                                           ("member" "intersection")
                                           -1)
                                          (("2"
                                            (flatten)
                                            (("2"
                                              (expand
                                               ("member"
                                                "intersection")
                                               1)
                                              (("2"
                                                (prop)
                                                (("2"
                                                  (use "vars_subs_t")
                                                  (("2"
                                                    (expand
                                                     "subset?"
                                                     -1)
                                                    (("2"
                                                      (inst -1 "x")
                                                      (("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide 2)
                  (("2" (expand "disjoint?")
                    (("2" (expand "empty?")
                      (("2" (skeep) (("2" (grind) nil nil)) nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs def-decl "term" substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" term_adt
       nil)
    (subs_append2 formula-decl nil substitution nil)
    (vars_subs_t formula-decl nil substitution nil)
    (vars def-decl "finite_set[variable]" term_properties nil)
    (subs_no_effect_t formula-decl nil substitution nil)
    (subs const-decl "term" substitution nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (img const-decl
     "finite_set[term[atom, perm, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (vars def-decl "finite_set[variable]" term_properties nil)
    (vars def-decl "finite_set[variable]" freshness nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil))
   shostak))
 (fresh_subs_weakening 0
  (fresh_subs_weakening-1 nil 3885980032
   ("" (induct "Delta")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("ax" "Delta"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "fresh_subs" (-2 1))
            (("2" (flatten)
              (("2" (inst -1 "Nabla1" "Nabla2" "sigma")
                (("2" (assert)
                  (("2" (prop)
                    (("2"
                      (lemma "fresh_weakening"
                       ("Delta" "Nabla1" "Nabla" "Nabla2" "a" "ax`1"
                        "t" "subs(sigma)((: :) * ax`2)"))
                      (("2" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* adt-constructor-decl "[[perm, variable] -> (var?)]" term_adt
       nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs def-decl "term" substitution nil)
    (fresh_weakening formula-decl nil freshness nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil))
   shostak))
 (fresh_subs_fresh 0
  (fresh_subs_fresh-1 nil 3885991827
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (lemma "term_opt")
            (("" (inst?)
              (("" (prop)
                (("1" (replace -2 1)
                  (("1" (rewrite "subs_const")
                    (("1" (assert)
                      (("1" (expand "fresh" (-5 1))
                        (("1" (propax) nil nil)) nil))
                      nil))
                    nil))
                  nil)
                 ("2" (hide -3)
                  (("2" (replace -2)
                    (("2" (expand "fresh" -4)
                      (("2" (rewrite "subs_ext_pi")
                        (("2" (rewrite "ext_reverse_fresh" 1)
                          (("2"
                            (name-replace "b" "act(reverse(p(t)))(a)")
                            (("2" (reveal -1)
                              (("2"
                                (use "fresh_subs_character")
                                (("2"
                                  (assert)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (inst -1 "(b, V(t))")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (expand "subs" 1)
                                          (("2" (propax) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("3" (replace -1)
                  (("3" (rewrite "subs_unit")
                    (("3" (expand "fresh") (("3" (propax) nil nil))
                      nil))
                    nil))
                  nil)
                 ("4" (replace -2 -5)
                  (("4" (replace -2 1)
                    (("4" (rewrite "subs_pair" 1)
                      (("4" (expand "fresh" (-5 1))
                        (("4" (flatten)
                          (("4" (prop)
                            (("1" (inst -3 "term1(t)")
                              (("1"
                                (prop)
                                (("1"
                                  (inst -1 "G" "G1" "a" "sigma")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil)
                             ("2" (inst -3 "term2(t)")
                              (("2"
                                (prop)
                                (("1"
                                  (inst -1 "G" "G1" "a" "sigma")
                                  (("1" (assert) nil nil))
                                  nil)
                                 ("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("5" (replace -2 -5)
                  (("5" (replace -2 1)
                    (("5" (rewrite "subs_app")
                      (("5" (expand "fresh" (-5 1))
                        (("5" (inst -3 "arg(t)")
                          (("5" (expand "size" -3 2)
                            (("5" (assert)
                              (("5"
                                (inst -3 "G" "G1" "a" "sigma")
                                (("5" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("6" (replace -2 -5)
                  (("6" (replace -2 1)
                    (("6" (rewrite "subs_ac" 1)
                      (("6" (expand "fresh" (-5 1))
                        (("6" (inst -3 "ac_arg(t)")
                          (("6" (expand "size" -3 2)
                            (("6" (assert)
                              (("6"
                                (inst -3 "G" "G1" "a" "sigma")
                                (("6" (assert) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil)
                 ("7" (replace -2 -5)
                  (("7" (replace -2 1)
                    (("7" (rewrite "subs_abs" 1)
                      (("7" (expand "fresh" (-5 1))
                        (("7" (prop)
                          (("7" (inst -4 "body(t)")
                            (("7" (expand "size" -4 2)
                              (("7"
                                (assert)
                                (("7"
                                  (inst -4 "G" "G1" "a" "sigma")
                                  (("7" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((body adt-accessor-decl "[(abs?) -> term]" term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" term_adt nil)
    (abs? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_abs formula-decl nil substitution nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_ac formula-decl nil substitution nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_app formula-decl nil substitution nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_pair formula-decl nil substitution nil)
    (subs_unit formula-decl nil substitution nil)
    (subs const-decl "term" substitution nil)
    (ext_reverse_fresh formula-decl nil freshness nil)
    (act def-decl "atom" atoms nil)
    (subs_ext_pi formula-decl nil substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" term_adt nil)
    (subs_const formula-decl nil substitution nil)
    (atom? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (a adt-accessor-decl "[(atom?) -> atom]" term_adt nil)
    (term_opt formula-decl nil term_properties nil)
    (subs def-decl "term" substitution nil)
    (fresh def-decl "bool" freshness nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (fresh_context type-eq-decl nil freshness nil)
    (size def-decl "nat" term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (perm type-eq-decl nil atoms nil)
    (atom type-eq-decl nil atoms nil))
   shostak))
 (fresh_subs_equal 0
  (fresh_subs_equal-1 nil 3887473813
   ("" (induct "G")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "fresh_subs" 1 1)
            (("2" (expand "fresh_subs" 1 2)
              (("2" (inst?)
                (("2" (assert)
                  (("2" (replace -1)
                    (("2" (lemma "equal?_fresh")
                      (("2"
                        (inst -1 "G1" "hd`1"
                         "subs(sigma)((: :) * hd`2)"
                         "subs(sigma1)((: :) * hd`2)")
                        (("2" (split -1)
                          (("1" (replace -1) (("1" (propax) nil nil))
                            nil)
                           ("2" (hide 2)
                            (("2" (use "equal_sub_equiv")
                              (("2"
                                (assert)
                                (("2"
                                  (rewrite "equal_sub_sym" 1)
                                  nil
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equal?_fresh formula-decl nil equality nil)
    (equal_sub_equiv formula-decl nil substitution nil)
    (equal_sub_sym formula-decl nil substitution nil)
    (subs def-decl "term" substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" term_adt
       nil)
    (subs const-decl "term" substitution nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (equal? const-decl "bool" substitution nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil))
   shostak))
 (fresh_subs_equal2 0
  (fresh_subs_equal2-1 nil 3888739105
   ("" (induct "G")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "fresh_subs" 1 1)
            (("2" (expand "fresh_subs" 1 2)
              (("2" (inst?)
                (("2" (assert)
                  (("2" (split -1)
                    (("1" (replace -1)
                      (("1" (lemma "equal?_fresh")
                        (("1"
                          (inst -1 "G1" "hd`1"
                           "subs(sigma)((: :) * hd`2)"
                           "subs(sigma1)((: :) * hd`2)")
                          (("1" (split -1)
                            (("1" (replace -1) (("1" (propax) nil nil))
                              nil)
                             ("2" (hide 2)
                              (("2"
                                (lemma "equal_sub_equiv_alt")
                                (("2"
                                  (inst?)
                                  (("2"
                                    (inst -1 "V1")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (prop)
                                        (("1"
                                          (rewrite
                                           "equal_sub_res_sym"
                                           1)
                                          nil
                                          nil)
                                         ("2"
                                          (hide -1 -2 2)
                                          (("2"
                                            (expand "subset?")
                                            (("2"
                                              (skeep)
                                              (("2"
                                                (inst?)
                                                (("2"
                                                  (assert)
                                                  (("2"
                                                    (grind)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide-all-but (-2 1))
                      (("2" (expand "subset?")
                        (("2" (skeep)
                          (("2" (inst?) (("2" (grind) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* adt-constructor-decl "[[perm, variable] -> (var?)]" term_adt
       nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs def-decl "term" substitution nil)
    (vars def-decl "finite_set[variable]" term_properties nil)
    (equal_sub_res_sym formula-decl nil substitution nil)
    (equal_sub_equiv_alt formula-decl nil substitution nil)
    (equal?_fresh formula-decl nil equality nil)
    (subs const-decl "term" substitution nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (vars def-decl "finite_set[variable]" freshness nil)
    (equal? const-decl "bool" substitution nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil))
   shostak))
 (fresh_subs_disjoint_dom 0
  (fresh_subs_disjoint_dom-1 nil 3888589010
   ("" (induct "Delta")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("eq" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "fresh_subs" 1)
            (("2" (prop)
              (("1" (hide -1)
                (("1" (case "subs(sigma)((::)*eq`2) = null * eq`2")
                  (("1" (replace -1)
                    (("1" (expand "fresh" 1) (("1" (grind) nil nil))
                      nil))
                    nil)
                   ("2" (use "subs_no_effect_t")
                    (("2" (assert)
                      (("2" (hide 2 3)
                        (("2" (expand "disjoint?")
                          (("2" (expand "empty?")
                            (("2" (skeep)
                              (("2"
                                (inst?)
                                (("2" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (inst?)
                (("2" (prop)
                  (("1" (lemma "fresh_subs_weakening")
                    (("1"
                      (inst -1 "tail" "tail" "cons(eq, tail)" "sigma")
                      (("1" (grind) nil nil)) nil))
                    nil)
                   ("2" (hide 2)
                    (("2" (expand "disjoint?")
                      (("2" (expand "empty?")
                        (("2" (skeep) (("2" (grind) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs def-decl "term" substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" term_adt
       nil)
    (fresh def-decl "bool" freshness nil)
    (act def-decl "atom" atoms nil)
    (vars def-decl "finite_set[variable]" term_properties nil)
    (subs_no_effect_t formula-decl nil substitution nil)
    (subs const-decl "term" substitution nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (vars def-decl "finite_set[variable]" freshness nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil))
   shostak))
 (subs_equal? 0
  (subs_equal?-1 nil 3885993051
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (skeep)
          (("" (hide -1)
            (("" (expand "equal?" -1)
              (("" (lift-if)
                (("" (prop)
                  (("1" (replace -2 1 nil rl)
                    (("1" (rewrite "subs_const")
                      (("1" (lemma "term_at_eta")
                        (("1" (inst -1 "t")
                          (("1" (replace -1 1)
                            (("1" (replace -1 1 rl)
                              (("1"
                                (rewrite "subs_const")
                                (("1" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (lemma "term_times_eta")
                    (("2" (inst? -1)
                      (("2" (replace -1 2 rl)
                        (("2" (lemma "term_times_eta")
                          (("2" (inst -1 "s")
                            (("2" (replace -1 2 :dir rl)
                              (("2"
                                (rewrite "subs_ext_pi")
                                (("2"
                                  (rewrite "subs_ext_pi")
                                  (("2"
                                    (replace -5 :dir rl)
                                    (("2"
                                      (use "equal?_fresh_invariance")
                                      (("2"
                                        (assert)
                                        (("2"
                                          (hide 3 2)
                                          (("2"
                                            (skeep)
                                            (("2"
                                              (typepred "a")
                                              (("2"
                                                (inst -7 "a")
                                                (("2"
                                                  (use
                                                   "fresh_subs_character")
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "(a, V(t))")
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (expand
                                                           "subs"
                                                           1)
                                                          (("2"
                                                            (propax)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("3" (replace -2 3)
                    (("3" (rewrite "subs_unit")
                      (("3" (case "t = unit")
                        (("1" (replace -1 3)
                          (("1" (rewrite "subs_unit")
                            (("1" (rewrite "equal?_ref") nil nil))
                            nil))
                          nil)
                         ("2" (grind) nil nil))
                        nil))
                      nil))
                    nil)
                   ("4" (lemma "term_pair_eta")
                    (("4" (inst-cp -1 "t")
                      (("4" (inst -1 "s")
                        (("4" (replace -1 4 rl t)
                          (("4" (replace -1 4 rl t)
                            (("4" (rewrite "subs_pair")
                              (("4"
                                (rewrite "subs_pair")
                                (("4"
                                  (expand "equal?" 4)
                                  (("4"
                                    (prop)
                                    (("1"
                                      (reveal -4)
                                      (("1"
                                        (inst -1 "term1(t)")
                                        (("1"
                                          (prop)
                                          (("1"
                                            (inst? -1)
                                            (("1"
                                              (inst -1 "G")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (reveal -4)
                                      (("2"
                                        (inst -1 "term2(t)")
                                        (("2"
                                          (prop)
                                          (("1"
                                            (inst? -1)
                                            (("1"
                                              (inst -1 "G")
                                              (("1" (assert) nil nil))
                                              nil))
                                            nil)
                                           ("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("5" (hide 1 2 3 4)
                    (("5" (lemma "term_app_eta")
                      (("5" (inst -1 "t")
                        (("5" (replace -1 1 rl)
                          (("5" (hide -1)
                            (("5" (rewrite "subs_app")
                              (("5"
                                (lemma "term_app_eta")
                                (("5"
                                  (inst -1 "s")
                                  (("5"
                                    (replace -1 1 rl)
                                    (("5"
                                      (rewrite "subs_app")
                                      (("5"
                                        (expand "equal?" 1)
                                        (("5"
                                          (assert)
                                          (("5"
                                            (reveal -3)
                                            (("5"
                                              (inst -1 "arg(t)")
                                              (("5"
                                                (prop)
                                                (("1"
                                                  (inst
                                                   -1
                                                   "G"
                                                   "G1"
                                                   "arg(s)"
                                                   "sigma")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (use
                                                       "equal?_num_arg2")
                                                      (("1"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2" (grind) nil nil)
                                                 ("3" (grind) nil nil)
                                                 ("4" (grind) nil nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("6" (assert)
                    (("6" (flatten)
                      (("6" (name-replace "g" "ac_sym(t)")
                        (("6" (case "num_arg(g, t) = num_arg(g, s)")
                          (("1" (hide 1 2 3 4 5)
                            (("1" (skeep)
                              (("1"
                                (lemma "term_ac_app_eta")
                                (("1"
                                  (inst? -1)
                                  (("1"
                                    (hide -6 -7 -8 -9)
                                    (("1"
                                      (replace -5 -1 rl)
                                      (("1"
                                        (replace -1 1 rl)
                                        (("1"
                                          (hide -1)
                                          (("1"
                                            (lemma "term_ac_app_eta")
                                            (("1"
                                              (inst -1 "t")
                                              (("1"
                                                (replace -1 1 rl)
                                                (("1"
                                                  (rewrite "subs_ac")
                                                  (("1"
                                                    (rewrite "subs_ac")
                                                    (("1"
                                                      (reveal -7)
                                                      (("1"
                                                        (replace -1 1)
                                                        (("1"
                                                          (hide -1 -2)
                                                          (("1"
                                                            (case
                                                             "equal?(G)(t, s)")
                                                            (("1"
                                                              (lemma
                                                               "perm_args_ac")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "G1"
                                                                 "ac_app(g, subs(sigma)(ac_arg(s)))"
                                                                 "g"
                                                                 "_")
                                                                (("1"
                                                                  (inst?
                                                                   -1)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (hide
                                                                       2)
                                                                      (("1"
                                                                        (expand
                                                                         "are_ac?"
                                                                         1)
                                                                        (("1"
                                                                          (lemma
                                                                           "args_subs_ac")
                                                                          (("1"
                                                                            (hide
                                                                             -1)
                                                                            (("1"
                                                                              (lemma
                                                                               "subs_ac")
                                                                              (("1"
                                                                                (inst-cp
                                                                                 -1
                                                                                 "ac_arg(t)"
                                                                                 "g"
                                                                                 "sigma")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "ac_arg(s)"
                                                                                   "g"
                                                                                   "sigma")
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1
                                                                                     1
                                                                                     rl)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -2
                                                                                       1
                                                                                       rl)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -1
                                                                                         -2)
                                                                                        (("1"
                                                                                          (case
                                                                                           "num_arg(g, t) > 1")
                                                                                          (("1"
                                                                                            (reveal
                                                                                             -7
                                                                                             -14)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -2
                                                                                               -1)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -1
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (reveal
                                                                                                     -9)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       1
                                                                                                       nil
                                                                                                       t)
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "subs_perm_get_args_ge1")
                                                                                                        (("1"
                                                                                                          (inst?
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "G1"
                                                                                                             "i")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "perm?(G1)(append(get_args(g)(subs(sigma)(select(g, t)(i))),
                                                                                   get_args(g)(subs(sigma)(delete(g, t)(i)))), get_args(g)(subs(sigma)(s)))")
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "perm?_trans")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "G1"
                                                                                                                     "get_args(g)(subs(sigma)(t))"
                                                                                                                     "_"
                                                                                                                     "_")
                                                                                                                    (("1"
                                                                                                                      (inst?
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   -1
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "subs_perm_get_args_ge1")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "G1"
                                                                                                                       "g"
                                                                                                                       "j"
                                                                                                                       "sigma"
                                                                                                                       "s")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "perm?_sym")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "G1"
                                                                                                                             "get_args(g)(subs(sigma)(s))"
                                                                                                                             "append(get_args(g)(subs(sigma)(select(g, s)(j))),
                                                                       get_args(g)(subs(sigma)(delete(g, s)(j))))")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (hide
                                                                                                                                 -2)
                                                                                                                                (("2"
                                                                                                                                  (case
                                                                                                                                   "perm?(G1)(append(get_args(g)(subs(sigma)(select(g, t)(i))),
                                                                                           get_args(g)(subs(sigma)(delete(g, t)(i)))), append(get_args(g)(subs(sigma)(select(g, s)(j))),
                                                                                           get_args(g)(subs(sigma)(delete(g, s)(j)))))")
                                                                                                                                  (("1"
                                                                                                                                    (hide
                                                                                                                                     -11
                                                                                                                                     -10
                                                                                                                                     -9
                                                                                                                                     -8
                                                                                                                                     -7
                                                                                                                                     -6
                                                                                                                                     -5)
                                                                                                                                    (("1"
                                                                                                                                      (lemma
                                                                                                                                       "perm?_trans")
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "G1"
                                                                                                                                         "_"
                                                                                                                                         "_"
                                                                                                                                         "get_args(g)(subs(sigma)(s))")
                                                                                                                                        (("1"
                                                                                                                                          (inst?
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (assert)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (hide
                                                                                                                                     2)
                                                                                                                                    (("2"
                                                                                                                                      (hide
                                                                                                                                       -1)
                                                                                                                                      (("2"
                                                                                                                                        (lemma
                                                                                                                                         "perm?_append")
                                                                                                                                        (("2"
                                                                                                                                          (inst?
                                                                                                                                           -1)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (hide
                                                                                                                                               2)
                                                                                                                                              (("2"
                                                                                                                                                (prop)
                                                                                                                                                (("1"
                                                                                                                                                  (reveal
                                                                                                                                                   -23)
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -1
                                                                                                                                                     "select(g, t)(i)")
                                                                                                                                                    (("1"
                                                                                                                                                      (hide
                                                                                                                                                       -10)
                                                                                                                                                      (("1"
                                                                                                                                                        (prop)
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             -1
                                                                                                                                                             "G"
                                                                                                                                                             "G1"
                                                                                                                                                             "select(g, s)(j)"
                                                                                                                                                             "sigma")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (hide
                                                                                                                                                                 -9)
                                                                                                                                                                (("1"
                                                                                                                                                                  (rewrite
                                                                                                                                                                   "ac_perm_args2")
                                                                                                                                                                  nil
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil)
                                                                                                                                                         ("2"
                                                                                                                                                          (rewrite
                                                                                                                                                           "ac_select_size")
                                                                                                                                                          (("2"
                                                                                                                                                            (expand
                                                                                                                                                             "is_ac_sym?"
                                                                                                                                                             1)
                                                                                                                                                            (("2"
                                                                                                                                                              (propax)
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil)
                                                                                                                                                 ("2"
                                                                                                                                                  (reveal
                                                                                                                                                   -23)
                                                                                                                                                  (("2"
                                                                                                                                                    (inst
                                                                                                                                                     -1
                                                                                                                                                     "delete(g, t)(i)")
                                                                                                                                                    (("2"
                                                                                                                                                      (prop)
                                                                                                                                                      (("1"
                                                                                                                                                        (inst
                                                                                                                                                         -1
                                                                                                                                                         "G"
                                                                                                                                                         "G1"
                                                                                                                                                         "delete(g, s)(j)"
                                                                                                                                                         "sigma")
                                                                                                                                                        (("1"
                                                                                                                                                          (assert)
                                                                                                                                                          (("1"
                                                                                                                                                            (hide
                                                                                                                                                             -9
                                                                                                                                                             -10)
                                                                                                                                                            (("1"
                                                                                                                                                              (rewrite
                                                                                                                                                               "ac_perm_args2")
                                                                                                                                                              nil
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil)
                                                                                                                                                       ("2"
                                                                                                                                                        (lemma
                                                                                                                                                         "ac_delete_size")
                                                                                                                                                        (("2"
                                                                                                                                                          (inst?
                                                                                                                                                           -1)
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            nil
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil)
                                                                                           ("2"
                                                                                            (case
                                                                                             "num_arg(g, t) = 1")
                                                                                            (("1"
                                                                                              (lemma
                                                                                               "subs_get_args1")
                                                                                              (("1"
                                                                                                (inst?
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (inst
                                                                                                   -1
                                                                                                   "i")
                                                                                                  (("1"
                                                                                                    (prop)
                                                                                                    (("1"
                                                                                                      (replace
                                                                                                       -1
                                                                                                       2)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -1)
                                                                                                        (("1"
                                                                                                          (reveal
                                                                                                           -10)
                                                                                                          (("1"
                                                                                                            (reveal
                                                                                                             -17)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (hide
                                                                                                                 -1)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -1
                                                                                                                   2)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "subs_get_args1")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "g"
                                                                                                                       "j"
                                                                                                                       "sigma"
                                                                                                                       "s")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (reveal
                                                                                                                           -11)
                                                                                                                          (("1"
                                                                                                                            (replace
                                                                                                                             -1
                                                                                                                             2)
                                                                                                                            (("1"
                                                                                                                              (replace
                                                                                                                               -2
                                                                                                                               2)
                                                                                                                              (("1"
                                                                                                                                (hide
                                                                                                                                 -1
                                                                                                                                 -2
                                                                                                                                 -11)
                                                                                                                                (("1"
                                                                                                                                  (reveal
                                                                                                                                   -20)
                                                                                                                                  (("1"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "select(g, t)(i)")
                                                                                                                                    (("1"
                                                                                                                                      (prop)
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "G"
                                                                                                                                         "G1"
                                                                                                                                         "select(g, s)(j)"
                                                                                                                                         "sigma")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (hide
                                                                                                                                             -6)
                                                                                                                                            (("1"
                                                                                                                                              (rewrite
                                                                                                                                               "ac_perm_args2")
                                                                                                                                              nil
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil)
                                                                                                                                       ("2"
                                                                                                                                        (rewrite
                                                                                                                                         "ac_select_size")
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           "is_ac_sym?"
                                                                                                                                           1)
                                                                                                                                          (("2"
                                                                                                                                            (assert)
                                                                                                                                            (("2"
                                                                                                                                              (reveal
                                                                                                                                               -19)
                                                                                                                                              (("2"
                                                                                                                                                (assert)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (reveal
                                                                                                       -9
                                                                                                       -16)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -2
                                                                                                         -1)
                                                                                                        (("2"
                                                                                                          (replace
                                                                                                           -1
                                                                                                           1)
                                                                                                          (("2"
                                                                                                            (propax)
                                                                                                            nil
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil)
                                                                                             ("2"
                                                                                              (lemma
                                                                                               "num_arg_ge1")
                                                                                              (("2"
                                                                                                (inst?
                                                                                                 -1)
                                                                                                (("2"
                                                                                                  (assert)
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (hide 2)
                                                              (("2"
                                                                (expand
                                                                 "equal?"
                                                                 1)
                                                                (("2"
                                                                  (assert)
                                                                  (("2"
                                                                    (reveal
                                                                     -3
                                                                     -4
                                                                     -5
                                                                     -6
                                                                     -8)
                                                                    (("2"
                                                                      (assert)
                                                                      (("2"
                                                                        (inst
                                                                         1
                                                                         "i"
                                                                         "j")
                                                                        (("2"
                                                                          (assert)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (lemma "equal?_num_arg")
                            (("2" (hide 2 3 4 5 6 7)
                              (("2"
                                (inst -1 "G" "g" "s" "t")
                                (("2"
                                  (assert)
                                  (("2"
                                    (expand "equal?" 1)
                                    (("2"
                                      (expand "g")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("7" (lemma "term_abs_eta")
                    (("7" (inst -1 "t")
                      (("7" (lemma "term_abs_eta")
                        (("7" (inst -1 "s")
                          (("7" (replace -2 7 :dir rl)
                            (("7" (rewrite "subs_abs")
                              (("7"
                                (replace -1 7 :dir rl)
                                (("7"
                                  (rewrite "subs_abs")
                                  (("7"
                                    (expand "equal?" 7)
                                    (("7"
                                      (assert)
                                      (("7"
                                        (reveal -2)
                                        (("7"
                                          (inst -1 "body(t)")
                                          (("7"
                                            (prop)
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (assert)
                                                (("1" (grind) nil nil))
                                                nil))
                                              nil)
                                             ("2" (grind) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("8" (lemma "term_abs_eta")
                    (("8" (inst -1 "t")
                      (("8" (lemma "term_abs_eta")
                        (("8" (inst -1 "s")
                          (("8" (replace -2 8 :dir rl)
                            (("8" (rewrite "subs_abs")
                              (("8"
                                (replace -1 8 :dir rl)
                                (("8"
                                  (rewrite "subs_abs")
                                  (("8"
                                    (expand "equal?" 8)
                                    (("8"
                                      (assert)
                                      (("8"
                                        (prop)
                                        (("1"
                                          (use "fresh_subs_fresh")
                                          (("1" (assert) nil nil))
                                          nil)
                                         ("2"
                                          (reveal -2)
                                          (("2"
                                            (inst -1 "body(t)")
                                            (("2"
                                              (prop)
                                              (("1"
                                                (inst
                                                 -1
                                                 "G"
                                                 "G1"
                                                 "_"
                                                 "sigma")
                                                (("1"
                                                  (inst
                                                   -1
                                                   "ext(cons((abstr(t), abstr(s)), null))(body(s))")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (rewrite
                                                       "subs_ext")
                                                      nil
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (grind) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((a adt-accessor-decl "[(atom?) -> atom]" term_adt nil)
    (atom? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs_const formula-decl nil substitution nil)
    (term_at_eta formula-decl nil term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (equal?_fresh_invariance formula-decl nil equality nil)
    (subs const-decl "term" substitution nil)
    (ds const-decl "set[atom]" atoms nil)
    (subs_ext_pi formula-decl nil substitution nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (p adt-accessor-decl "[(var?) -> perm]" term_adt nil)
    (term_times_eta formula-decl nil term_adt nil)
    (subs_unit formula-decl nil substitution nil)
    (equal?_ref formula-decl nil equality nil)
    (unit adt-constructor-decl "(unit?)" term_adt nil)
    (unit? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (subs_pair formula-decl nil substitution nil)
    (term_pair_eta formula-decl nil term_adt nil)
    (term_app_eta formula-decl nil term_adt nil)
    (f_sym adt-accessor-decl "[(app?) -> f_symbol]" term_adt nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (subs_app formula-decl nil substitution nil)
    (equal?_num_arg2 formula-decl nil equality nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (num_arg def-decl "nat" term_properties nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (subs_ac formula-decl nil substitution nil)
    (perm_args_ac formula-decl nil equality nil)
    (args_subs_ac formula-decl nil substitution nil)
    (perm?_sym formula-decl nil equality nil)
    (ac_delete_size formula-decl nil term_properties nil)
    (ac_select_size formula-decl nil term_properties nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (ac_perm_args2 formula-decl nil equality nil)
    (perm?_append formula-decl nil equality nil)
    (perm?_trans formula-decl nil equality nil)
    (delete def-decl "term" term_properties nil)
    (select def-decl "term" term_properties nil)
    (get_args const-decl "args" term_properties nil)
    (perm? def-decl "bool" equality nil)
    (args type-eq-decl nil term_properties nil)
    (subs_perm_get_args_ge1 formula-decl nil substitution nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (subs_get_args1 formula-decl nil substitution nil)
    (are_ac? const-decl "bool" term_properties nil)
    (ac_app adt-constructor-decl "[[ac_symbol, term] -> (ac_app?)]"
     term_adt nil)
    (term_ac_app_eta formula-decl nil term_adt nil)
    (equal?_num_arg formula-decl nil equality nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (abs? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (body adt-accessor-decl "[(abs?) -> term]" term_adt nil)
    (abstr adt-accessor-decl "[(abs?) -> atom]" term_adt nil)
    (subs_abs formula-decl nil substitution nil)
    (term_abs_eta formula-decl nil term_adt nil)
    (ext def-decl "term" term_properties nil)
    (subs_ext formula-decl nil substitution nil)
    (subs def-decl "term" substitution nil)
    (equal? def-decl "bool" equality nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (fresh_context type-eq-decl nil freshness nil)
    (size def-decl "nat" term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (perm type-eq-decl nil atoms nil)
    (atom type-eq-decl nil atoms nil))
   nil))
 (subs_perm? 0
  (subs_perm?-1 nil 3888758692
   ("" (measure-induct "length(args1)" "args1")
    (("" (skolem 1 "args1")
      (("" (prop)
        (("" (skeep)
          (("" (hide -1)
            (("" (expand "perm?" -1)
              (("" (prop)
                (("1" (expand "subs" 1)
                  (("1" (assert) (("1" (grind) nil nil)) nil)) nil)
                 ("2" (skeep)
                  (("2" (hide 1)
                    (("2" (expand "perm?" 1)
                      (("2" (prop)
                        (("1" (hide -2 -3 1)
                          (("1" (reveal 2) (("1" (grind) nil nil))
                            nil))
                          nil)
                         ("2" (inst 2 "i" "j")
                          (("1" (prop)
                            (("1" (hide -2)
                              (("1"
                                (rewrite "subs_args_nth")
                                (("1"
                                  (rewrite "subs_args_nth")
                                  (("1"
                                    (lemma "subs_equal?")
                                    (("1"
                                      (inst? -1)
                                      (("1"
                                        (inst -1 "G")
                                        (("1" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (rewrite "subs_remove")
                              (("2"
                                (rewrite "subs_remove")
                                (("2"
                                  (reveal -1)
                                  (("2"
                                    (inst -1 "remove(args1, i)")
                                    (("2"
                                      (prop)
                                      (("1"
                                        (inst? -1)
                                        (("1"
                                          (assert)
                                          (("1"
                                            (inst -1 "G")
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (rewrite "remove_len")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil)
                           ("2" (typepred "j")
                            (("2" (rewrite "subs_len") nil nil)) nil)
                           ("3" (rewrite "subs_len")
                            (("3" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_remove formula-decl nil substitution nil)
    (remove_len formula-decl nil list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (subs_args_nth formula-decl nil substitution nil)
    (subs_len formula-decl nil substitution nil)
    (subs def-decl "args" substitution nil)
    (perm? def-decl "bool" equality nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (fresh_context type-eq-decl nil freshness nil)
    (variable type-eq-decl nil term_properties nil)
    (args type-eq-decl nil term_properties nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (perm type-eq-decl nil atoms nil)
    (atom type-eq-decl nil atoms nil))
   nil))
 (subs_perm?_get_args 0
  (subs_perm?_get_args-1 nil 3886000123
   ("" (skeep)
    (("" (rewrite "subs_map")
      (("" (rewrite "subs_map")
        (("" (lemma "perm?_get_args_flatten")
          (("" (inst?)
            (("" (assert)
              (("" (hide 2)
                (("" (lemma "subs_perm?")
                  (("" (inst?)
                    (("" (inst -1 "G") (("" (assert) nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_map formula-decl nil substitution nil)
    (atom type-eq-decl nil atoms nil) (perm type-eq-decl nil atoms nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (every adt-def-decl "boolean" term_adt nil)
    (args type-eq-decl nil term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (perm?_get_args_flatten formula-decl nil equality nil)
    (subs def-decl "args" substitution nil)
    (fresh_context type-eq-decl nil freshness nil))
   nil))
 (subs_same_count_TCC1 0
  (subs_same_count_TCC1-1 nil 3886000166
   ("" (skeep) (("" (rewrite "equal?_equiv") nil nil)) nil)
   ((equal?_equiv formula-decl nil equality nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil freshness nil))
   nil
   (subs_same_count subtype "equality.equal?(fresh_subs.G)"
    "equiv[term[atom, perm, variable, f_symbol, ac_symbol]]")))
 (subs_same_count_TCC2 0
  (subs_same_count_TCC2-1 nil 3886000166
   ("" (skeep) (("" (rewrite "equal?_equiv") nil nil)) nil)
   ((equal?_equiv formula-decl nil equality nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil freshness nil))
   nil
   (subs_same_count subtype "equality.equal?(fresh_subs.G1)"
    "equiv[term[atom, perm, variable, f_symbol, ac_symbol]]")))
 (subs_same_count 0
  (subs_same_count-1 nil 3886000148
   ("" (skeep)
    (("" (lemma "perm?_equiv_same_count?")
      (("" (inst?)
        (("" (assert)
          (("" (lemma "subs_perm?")
            (("" (inst?)
              (("" (inst -1 "G1" "sigma")
                (("" (assert)
                  (("" (lemma "perm?_equiv_same_count?")
                    (("" (inst?) (("" (assert) nil nil)) nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((perm?_equiv_same_count? formula-decl nil equality nil)
    (subs def-decl "args" substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (args type-eq-decl nil term_properties nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil))
   nil))
 (equal_sub_res_append 0
  (equal_sub_res_append-1 nil 3886000176
   ("" (skeep)
    (("" (expand "equal?" 1)
      (("" (skolem 1 "x")
        (("" (expand "equal?" -1)
          (("" (inst -1 "x")
            (("" (prop)
              (("" (expand "subs")
                (("" (rewrite "subs_append2")
                  (("" (rewrite "subs_append2")
                    (("" (lemma "subs_equal?")
                      (("" (inst?)
                        (("" (inst -1 "G") (("" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equal? const-decl "bool" substitution nil)
    (subs_append2 formula-decl nil substitution nil)
    (atom type-eq-decl nil atoms nil) (perm type-eq-decl nil atoms nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (every adt-def-decl "boolean" term_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" term_adt
       nil)
    (fresh_context type-eq-decl nil freshness nil)
    (subs def-decl "term" substitution nil)
    (subs const-decl "term" substitution nil)
    (variable type-eq-decl nil term_properties nil))
   nil))
 (equal_sub_fresh_subs_append 0
  (equal_sub_fresh_subs_append-1 nil 3888588616
   ("" (skeep)
    (("" (expand "equal?")
      (("" (skolem 1 "x")
        (("" (inst?)
          (("" (expand "subs")
            (("" (rewrite "subs_append2")
              (("" (rewrite "subs_append2")
                (("" (use "subs_equal?") (("" (assert) nil nil)) nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((equal? const-decl "bool" substitution nil)
    (variable type-eq-decl nil term_properties nil)
    (subs_append2 formula-decl nil substitution nil)
    (atom type-eq-decl nil atoms nil) (perm type-eq-decl nil atoms nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (every adt-def-decl "boolean" term_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" term_adt
       nil)
    (fresh_context type-eq-decl nil freshness nil)
    (subs def-decl "term" substitution nil)
    (subs const-decl "term" substitution nil))
   shostak))
 (more_general_append2 0
  (more_general_append2-1 nil 3888588363
   ("" (skeep)
    (("" (expand "more_general?" -1)
      (("" (skolem -1 "sigma1")
        (("" (expand "more_general?" 1)
          (("" (inst 1 "append(gamma, sigma1)")
            (("" (lemma "equal_sub_fresh_subs_append")
              (("" (inst?)
                (("" (inst -1 "G " "gamma")
                  (("" (assert)
                    (("" (rewrite "append_assoc")
                      (("" (assert)
                        (("" (use "fresh_subs_disjoint_dom")
                          (("" (assert)
                            (("" (hide-all-but (-2 -3 1))
                              ((""
                                (expand "disjoint?")
                                ((""
                                  (expand "subset?")
                                  ((""
                                    (expand "empty?")
                                    ((""
                                      (skeep)
                                      (("" (grind) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((more_general? const-decl "bool" substitution nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (subs const-decl "term" substitution nil)
    (fresh_context type-eq-decl nil freshness nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (perm type-eq-decl nil atoms nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil))
   shostak))
 (subs_count_ge_TCC1 0
  (subs_count_ge_TCC1-1 nil 3886000275
   ("" (skeep) (("" (rewrite "equal?_equiv") nil nil)) nil)
   ((equal?_equiv formula-decl nil equality nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (int nonempty-type-eq-decl nil integers nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (list type-decl nil list_adt nil)
    (fresh_context type-eq-decl nil freshness nil))
   nil
   (subs_count_ge subtype "equality.equal?(fresh_subs.G1)"
    "equiv[term[atom, perm, variable, f_symbol, ac_symbol]]")))
 (subs_count_ge 0
  (subs_count_ge-1 nil 3886000244
   ("" (measure-induct "size(t)" "t")
    (("1" (skolem 1 ("t"))
      (("1" (prop)
        (("1" (hide -1)
          (("1" (skeep)
            (("1" (skeep)
              (("1" (lemma "subs_get_args1")
                (("1" (inst -1 "f" "1" "sigma" "t")
                  (("1" (case "num_arg(f, t) = 1")
                    (("1" (assert)
                      (("1" (inst -3 "select(f, t)(1)")
                        (("1"
                          (case "count(select(f, t)(1), get_args(f)(t), equal?(G)) > 0")
                          (("1"
                            (case "count(select(f, t)(1), get_args(f)(s), equal?(G)) > 0")
                            (("1" (hide -2)
                              (("1"
                                (replace -3)
                                (("1"
                                  (case "num_arg(f, s) = 1")
                                  (("1"
                                    (lemma "subs_get_args1")
                                    (("1"
                                      (inst -1 "f" "1" "sigma" "s")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (lemma "count_gt0[term]")
                                          (("1"
                                            (name-replace
                                             "t1"
                                             "select(f, t)(1)")
                                            (("1"
                                              (inst
                                               -1
                                               "equal?(G)"
                                               "get_args(f)(s)"
                                               "t1")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (skolem -1 "i")
                                                  (("1"
                                                    (replace -2)
                                                    (("1"
                                                      (lemma
                                                       "get_args_nth")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "f"
                                                         "i+1"
                                                         "s")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (replace
                                                               -1)
                                                              (("1"
                                                                (case
                                                                 "i = 0")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (replace
                                                                     -1)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (lemma
                                                                           "subs_equal?")
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "G"
                                                                             "G1"
                                                                             "select(f, s)(1)"
                                                                             "sigma"
                                                                             "t1")
                                                                            (("1"
                                                                              (assert)
                                                                              (("1"
                                                                                (lemma
                                                                                 "ac_perm_args2")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "G1"
                                                                                   "f"
                                                                                   "subs(sigma)(select(f, s)(1))"
                                                                                   "subs(sigma)(t1)")
                                                                                  (("1"
                                                                                    (assert)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "perm?_equiv_same_count?")
                                                                                      (("1"
                                                                                        (inst?)
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "same_count?"
                                                                                             -1)
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "t2")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil)
                                                                 ("2"
                                                                  (typepred
                                                                   "i")
                                                                  (("2"
                                                                    (rewrite
                                                                     "get_args_len")
                                                                    (("2"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (expand
                                                               "nice_ind?"
                                                               1)
                                                              (("2"
                                                                (typepred
                                                                 "i")
                                                                (("2"
                                                                  (rewrite
                                                                   "get_args_len")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2"
                                    (case "num_arg(f, s) > 1")
                                    (("1"
                                      (hide 1)
                                      (("1"
                                        (lemma "count_gt0[term]")
                                        (("1"
                                          (inst?)
                                          (("1"
                                            (assert)
                                            (("1"
                                              (skolem -1 "i")
                                              (("1"
                                                (name-replace
                                                 "t1"
                                                 "select(f, t)(1)")
                                                (("1"
                                                  (lemma
                                                   "get_args_nth")
                                                  (("1"
                                                    (inst?)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (case
                                                         "nice_ind?(1 + i, num_arg(f, s))")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "subs_perm_get_args_ge1")
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "G1"
                                                               "f"
                                                               "1+i"
                                                               "sigma"
                                                               "s")
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "perm?_equiv_same_count?")
                                                                  (("1"
                                                                    (inst?)
                                                                    (("1"
                                                                      (assert)
                                                                      (("1"
                                                                        (hide
                                                                         -2)
                                                                        (("1"
                                                                          (expand
                                                                           "same_count?"
                                                                           -1)
                                                                          (("1"
                                                                            (inst
                                                                             -1
                                                                             "t2")
                                                                            (("1"
                                                                              (replace
                                                                               -1)
                                                                              (("1"
                                                                                (rewrite
                                                                                 "count_append")
                                                                                (("1"
                                                                                  (hide
                                                                                   -1)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -2)
                                                                                    (("1"
                                                                                      (lemma
                                                                                       "subs_equal?")
                                                                                      (("1"
                                                                                        (inst
                                                                                         -1
                                                                                         "G"
                                                                                         "G1"
                                                                                         "select(f, s)(1 + i)"
                                                                                         "sigma"
                                                                                         "t1")
                                                                                        (("1"
                                                                                          (assert)
                                                                                          (("1"
                                                                                            (lemma
                                                                                             "ac_perm_args2")
                                                                                            (("1"
                                                                                              (inst
                                                                                               -1
                                                                                               "G1"
                                                                                               "f"
                                                                                               "subs(sigma)(select(f, s)(1 + i))"
                                                                                               "subs(sigma)(t1)")
                                                                                              (("1"
                                                                                                (assert)
                                                                                                (("1"
                                                                                                  (lemma
                                                                                                   "perm?_equiv_same_count?")
                                                                                                  (("1"
                                                                                                    (inst?)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -2)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "same_count?"
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "t2")
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                nil
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (hide -1)
                                                          (("2"
                                                            (hide 2)
                                                            (("2"
                                                              (expand
                                                               "nice_ind?"
                                                               1)
                                                              (("2"
                                                                (typepred
                                                                 "i")
                                                                (("2"
                                                                  (rewrite
                                                                   "get_args_len")
                                                                  (("2"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (lemma "num_arg_ge1")
                                      (("2"
                                        (inst -1 "f" "s")
                                        (("2" (assert) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (assert) nil nil))
                            nil)
                           ("2" (expand "get_args" 1)
                            (("2" (expand "from_min2max" 1)
                              (("2"
                                (expand "map" 1)
                                (("2"
                                  (expand "count" 1)
                                  (("2"
                                    (lift-if)
                                    (("2"
                                      (split)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (flatten)
                                          (("1" (assert) nil nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (flatten)
                                        (("2"
                                          (rewrite "equal?_ref")
                                          nil
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1)
                      (("2" (case "num_arg(f, t) > 1")
                        (("1" (hide 1)
                          (("1" (case "num_arg(f, s) > 1")
                            (("1" (inst -3 "select(f, t)(1)")
                              (("1"
                                (case
                                 "count(select(f, t)(1), get_args(f)(t), equal?(G)) > 0")
                                (("1"
                                  (case
                                   "count(select(f, t)(1), get_args(f)(s), equal?(G)) > 0")
                                  (("1"
                                    (lemma "count_gt0[term]")
                                    (("1"
                                      (inst
                                       -1
                                       "equal?(G)"
                                       "get_args(f)(s)"
                                       "select(f, t)(1)")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skolem -1 "i")
                                          (("1"
                                            (lemma "get_args_nth")
                                            (("1"
                                              (inst?)
                                              (("1"
                                                (prop)
                                                (("1"
                                                  (assert)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (lemma
                                                       "subs_perm_get_args_ge1")
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "G1"
                                                         "f"
                                                         "1"
                                                         "sigma"
                                                         "t")
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (lemma
                                                             "perm?_equiv_same_count?")
                                                            (("1"
                                                              (inst?)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (hide
                                                                   -2)
                                                                  (("1"
                                                                    (expand
                                                                     "same_count?"
                                                                     -1)
                                                                    (("1"
                                                                      (inst
                                                                       -1
                                                                       "t2")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (hide
                                                                           -1)
                                                                          (("1"
                                                                            (lemma
                                                                             "subs_perm_get_args_ge1")
                                                                            (("1"
                                                                              (inst
                                                                               -1
                                                                               "G1"
                                                                               "f"
                                                                               "1+i"
                                                                               "sigma"
                                                                               "s")
                                                                              (("1"
                                                                                (assert)
                                                                                (("1"
                                                                                  (lemma
                                                                                   "perm?_equiv_same_count?")
                                                                                  (("1"
                                                                                    (inst?)
                                                                                    (("1"
                                                                                      (assert)
                                                                                      (("1"
                                                                                        (hide
                                                                                         -2)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "same_count?"
                                                                                           -1)
                                                                                          (("1"
                                                                                            (inst
                                                                                             -1
                                                                                             "t2")
                                                                                            (("1"
                                                                                              (replace
                                                                                               -1)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "count_append")
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "count_append")
                                                                                                    (("1"
                                                                                                      (lemma
                                                                                                       "subs_equal?")
                                                                                                      (("1"
                                                                                                        (inst
                                                                                                         -1
                                                                                                         "G"
                                                                                                         "G1"
                                                                                                         "select(f, s)(1 + i)"
                                                                                                         "sigma"
                                                                                                         "select(f, t)(1)")
                                                                                                        (("1"
                                                                                                          (assert)
                                                                                                          (("1"
                                                                                                            (lemma
                                                                                                             "ac_perm_args2")
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "G1"
                                                                                                               "f"
                                                                                                               "subs(sigma)(select(f, s)(1 + i))"
                                                                                                               "subs(sigma)(select(f, t)(1))")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (hide
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "perm?_equiv_same_count?")
                                                                                                                    (("1"
                                                                                                                      (inst?)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (hide
                                                                                                                           -2)
                                                                                                                          (("1"
                                                                                                                            (expand
                                                                                                                             "same_count?"
                                                                                                                             -1)
                                                                                                                            (("1"
                                                                                                                              (inst
                                                                                                                               -1
                                                                                                                               "t2")
                                                                                                                              (("1"
                                                                                                                                (replace
                                                                                                                                 -1)
                                                                                                                                (("1"
                                                                                                                                  (assert)
                                                                                                                                  (("1"
                                                                                                                                    (case
                                                                                                                                     "count(t2, get_args(f)(subs(sigma)(delete(f, s)(1 + i))), equal?(G1)) >= count(t2, get_args(f)(subs(sigma)(delete(f, t)(1))), equal?(G1))")
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (hide
                                                                                                                                       2)
                                                                                                                                      (("2"
                                                                                                                                        (hide
                                                                                                                                         -1
                                                                                                                                         -2
                                                                                                                                         -3
                                                                                                                                         -4
                                                                                                                                         -5
                                                                                                                                         -8)
                                                                                                                                        (("2"
                                                                                                                                          (reveal
                                                                                                                                           -25)
                                                                                                                                          (("2"
                                                                                                                                            (inst
                                                                                                                                             -1
                                                                                                                                             "delete(f, t)(1)")
                                                                                                                                            (("2"
                                                                                                                                              (prop)
                                                                                                                                              (("1"
                                                                                                                                                (inst
                                                                                                                                                 -1
                                                                                                                                                 "G"
                                                                                                                                                 "G1"
                                                                                                                                                 "f"
                                                                                                                                                 "delete(f, s)(1+i)"
                                                                                                                                                 "sigma")
                                                                                                                                                (("1"
                                                                                                                                                  (prop)
                                                                                                                                                  (("1"
                                                                                                                                                    (inst
                                                                                                                                                     -1
                                                                                                                                                     "t2")
                                                                                                                                                    nil
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (hide
                                                                                                                                                     2)
                                                                                                                                                    (("2"
                                                                                                                                                      (skolem
                                                                                                                                                       1
                                                                                                                                                       "t1")
                                                                                                                                                      (("2"
                                                                                                                                                        (reveal
                                                                                                                                                         -4
                                                                                                                                                         -23)
                                                                                                                                                        (("2"
                                                                                                                                                          (lemma
                                                                                                                                                           "subs_perm_get_args_ge1")
                                                                                                                                                          (("2"
                                                                                                                                                            (inst
                                                                                                                                                             -1
                                                                                                                                                             "G"
                                                                                                                                                             "f"
                                                                                                                                                             "1"
                                                                                                                                                             "null"
                                                                                                                                                             "t")
                                                                                                                                                            (("2"
                                                                                                                                                              (assert)
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "subs"
                                                                                                                                                                 -1)
                                                                                                                                                                (("2"
                                                                                                                                                                  (inst
                                                                                                                                                                   -3
                                                                                                                                                                   "t1")
                                                                                                                                                                  (("2"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "perm?_equiv_same_count?")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (inst?)
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        (("2"
                                                                                                                                                                          (hide
                                                                                                                                                                           -2)
                                                                                                                                                                          (("2"
                                                                                                                                                                            (expand
                                                                                                                                                                             "same_count?"
                                                                                                                                                                             -1)
                                                                                                                                                                            (("2"
                                                                                                                                                                              (inst
                                                                                                                                                                               -1
                                                                                                                                                                               "t1")
                                                                                                                                                                              (("2"
                                                                                                                                                                                (replace
                                                                                                                                                                                 -1)
                                                                                                                                                                                (("2"
                                                                                                                                                                                  (hide
                                                                                                                                                                                   -1)
                                                                                                                                                                                  (("2"
                                                                                                                                                                                    (rewrite
                                                                                                                                                                                     "count_append")
                                                                                                                                                                                    (("2"
                                                                                                                                                                                      (lemma
                                                                                                                                                                                       "subs_perm_get_args_ge1")
                                                                                                                                                                                      (("2"
                                                                                                                                                                                        (inst
                                                                                                                                                                                         -1
                                                                                                                                                                                         "G"
                                                                                                                                                                                         "f"
                                                                                                                                                                                         "1+i"
                                                                                                                                                                                         "null"
                                                                                                                                                                                         "s")
                                                                                                                                                                                        (("2"
                                                                                                                                                                                          (assert)
                                                                                                                                                                                          (("2"
                                                                                                                                                                                            (expand
                                                                                                                                                                                             "subs"
                                                                                                                                                                                             -1)
                                                                                                                                                                                            (("2"
                                                                                                                                                                                              (lemma
                                                                                                                                                                                               "perm?_equiv_same_count?")
                                                                                                                                                                                              (("2"
                                                                                                                                                                                                (inst?)
                                                                                                                                                                                                (("2"
                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                    (hide
                                                                                                                                                                                                     -2)
                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                      (expand
                                                                                                                                                                                                       "same_count?"
                                                                                                                                                                                                       -1)
                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                        (inst
                                                                                                                                                                                                         -1
                                                                                                                                                                                                         "t1")
                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                          (replace
                                                                                                                                                                                                           -1)
                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                            (hide
                                                                                                                                                                                                             -1)
                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                              (rewrite
                                                                                                                                                                                                               "count_append")
                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                (lemma
                                                                                                                                                                                                                 "ac_perm_args2")
                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                  (inst
                                                                                                                                                                                                                   -1
                                                                                                                                                                                                                   "G"
                                                                                                                                                                                                                   "f"
                                                                                                                                                                                                                   "select(f, s)(1+i)"
                                                                                                                                                                                                                   "select(f, t)(1)")
                                                                                                                                                                                                                  (("2"
                                                                                                                                                                                                                    (assert)
                                                                                                                                                                                                                    (("2"
                                                                                                                                                                                                                      (lemma
                                                                                                                                                                                                                       "perm?_equiv_same_count?")
                                                                                                                                                                                                                      (("2"
                                                                                                                                                                                                                        (inst?)
                                                                                                                                                                                                                        (("2"
                                                                                                                                                                                                                          (assert)
                                                                                                                                                                                                                          (("2"
                                                                                                                                                                                                                            (hide
                                                                                                                                                                                                                             -2)
                                                                                                                                                                                                                            (("2"
                                                                                                                                                                                                                              (expand
                                                                                                                                                                                                                               "same_count?"
                                                                                                                                                                                                                               -1)
                                                                                                                                                                                                                              (("2"
                                                                                                                                                                                                                                (inst
                                                                                                                                                                                                                                 -1
                                                                                                                                                                                                                                 "t1")
                                                                                                                                                                                                                                (("2"
                                                                                                                                                                                                                                  (assert)
                                                                                                                                                                                                                                  nil
                                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                                nil))
                                                                                                                                                                                                                              nil))
                                                                                                                                                                                                                            nil))
                                                                                                                                                                                                                          nil))
                                                                                                                                                                                                                        nil))
                                                                                                                                                                                                                      nil))
                                                                                                                                                                                                                    nil))
                                                                                                                                                                                                                  nil))
                                                                                                                                                                                                                nil))
                                                                                                                                                                                                              nil))
                                                                                                                                                                                                            nil))
                                                                                                                                                                                                          nil))
                                                                                                                                                                                                        nil))
                                                                                                                                                                                                      nil))
                                                                                                                                                                                                    nil))
                                                                                                                                                                                                  nil))
                                                                                                                                                                                                nil))
                                                                                                                                                                                              nil))
                                                                                                                                                                                            nil))
                                                                                                                                                                                          nil))
                                                                                                                                                                                        nil))
                                                                                                                                                                                      nil))
                                                                                                                                                                                    nil))
                                                                                                                                                                                  nil))
                                                                                                                                                                                nil))
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil)
                                                                                                                                               ("2"
                                                                                                                                                (lemma
                                                                                                                                                 "num_arg_delete_size")
                                                                                                                                                (("2"
                                                                                                                                                  (inst?)
                                                                                                                                                  (("2"
                                                                                                                                                    (assert)
                                                                                                                                                    nil
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil)
                                                 ("2"
                                                  (typepred "i")
                                                  (("2"
                                                    (expand
                                                     "nice_ind?"
                                                     1)
                                                    (("2"
                                                      (rewrite
                                                       "get_args_len")
                                                      (("2"
                                                        (assert)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil)
                                   ("2" (assert) nil nil))
                                  nil)
                                 ("2"
                                  (lemma "count_mem[term]")
                                  (("2"
                                    (inst
                                     -1
                                     "equal?(G)"
                                     "get_args(f)(t)"
                                     "select(f, t)(1)")
                                    (("2"
                                      (assert)
                                      (("2"
                                        (expand "get_args" 1)
                                        (("2"
                                          (expand "from_min2max" 1)
                                          (("2"
                                            (expand "map" 1)
                                            (("2"
                                              (expand "member" 1)
                                              (("2" (propax) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (case "num_arg(f, s) = 1")
                              (("1"
                                (name-replace "t1" "select(f, t)(1)")
                                (("1"
                                  (inst -4 "t1")
                                  (("1"
                                    (name-replace
                                     "t3"
                                     "select(f, t)(2)")
                                    (("1"
                                      (reveal -1)
                                      (("1"
                                        (inst -1 "t3")
                                        (("1"
                                          (expand "get_args" -6 1)
                                          (("1"
                                            (replace -4)
                                            (("1"
                                              (expand
                                               "from_min2max"
                                               -6)
                                              (("1"
                                                (expand "map" -6)
                                                (("1"
                                                  (expand "map" -6 1)
                                                  (("1"
                                                    (expand
                                                     "count"
                                                     -6
                                                     1)
                                                    (("1"
                                                      (lift-if)
                                                      (("1"
                                                        (split)
                                                        (("1"
                                                          (flatten)
                                                          (("1"
                                                            (expand
                                                             "count"
                                                             -2
                                                             1)
                                                            (("1"
                                                              (expand
                                                               "get_args"
                                                               -3
                                                               2)
                                                              (("1"
                                                                (expand
                                                                 "from_min2max"
                                                                 -3)
                                                                (("1"
                                                                  (lift-if)
                                                                  (("1"
                                                                    (assert)
                                                                    (("1"
                                                                      (expand
                                                                       "get_args"
                                                                       -3
                                                                       1)
                                                                      (("1"
                                                                        (replace
                                                                         -6)
                                                                        (("1"
                                                                          (expand
                                                                           "from_min2max"
                                                                           -3
                                                                           1)
                                                                          (("1"
                                                                            (expand
                                                                             "map"
                                                                             -3
                                                                             1)
                                                                            (("1"
                                                                              (expand
                                                                               "count"
                                                                               -3
                                                                               1)
                                                                              (("1"
                                                                                (lift-if)
                                                                                (("1"
                                                                                  (split
                                                                                   -3)
                                                                                  (("1"
                                                                                    (flatten)
                                                                                    (("1"
                                                                                      (expand
                                                                                       "map"
                                                                                       -2
                                                                                       1)
                                                                                      (("1"
                                                                                        (expand
                                                                                         "count"
                                                                                         -2
                                                                                         1)
                                                                                        (("1"
                                                                                          (expand
                                                                                           "map"
                                                                                           -2
                                                                                           1)
                                                                                          (("1"
                                                                                            (expand
                                                                                             "count"
                                                                                             -2
                                                                                             1)
                                                                                            (("1"
                                                                                              (assert)
                                                                                              (("1"
                                                                                                (lift-if)
                                                                                                (("1"
                                                                                                  (hide
                                                                                                   1)
                                                                                                  (("1"
                                                                                                    (split
                                                                                                     -2)
                                                                                                    (("1"
                                                                                                      (flatten)
                                                                                                      (("1"
                                                                                                        (assert)
                                                                                                        (("1"
                                                                                                          (expand
                                                                                                           "from_min2max"
                                                                                                           -2)
                                                                                                          (("1"
                                                                                                            (lift-if)
                                                                                                            (("1"
                                                                                                              (split
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (flatten)
                                                                                                                (("1"
                                                                                                                  (expand
                                                                                                                   "map"
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (expand
                                                                                                                     "count"
                                                                                                                     -2
                                                                                                                     1)
                                                                                                                    (("1"
                                                                                                                      (lift-if)
                                                                                                                      (("1"
                                                                                                                        (split)
                                                                                                                        (("1"
                                                                                                                          (flatten)
                                                                                                                          (("1"
                                                                                                                            (assert)
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil)
                                                                                                                         ("2"
                                                                                                                          (flatten)
                                                                                                                          (("2"
                                                                                                                            (replace
                                                                                                                             -7)
                                                                                                                            (("2"
                                                                                                                              (rewrite
                                                                                                                               "equal?_ref")
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (flatten)
                                                                                                                (("2"
                                                                                                                  (hide
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (expand
                                                                                                                     "map"
                                                                                                                     -1
                                                                                                                     1)
                                                                                                                    (("2"
                                                                                                                      (expand
                                                                                                                       "count"
                                                                                                                       -1
                                                                                                                       1)
                                                                                                                      (("2"
                                                                                                                        (lift-if)
                                                                                                                        (("2"
                                                                                                                          (split
                                                                                                                           -1)
                                                                                                                          (("1"
                                                                                                                            (flatten)
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              nil
                                                                                                                              nil))
                                                                                                                            nil)
                                                                                                                           ("2"
                                                                                                                            (flatten)
                                                                                                                            (("2"
                                                                                                                              (replace
                                                                                                                               -6)
                                                                                                                              (("2"
                                                                                                                                (rewrite
                                                                                                                                 "equal?_ref")
                                                                                                                                nil
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil)
                                                                                                     ("2"
                                                                                                      (flatten)
                                                                                                      (("2"
                                                                                                        (replace
                                                                                                         -6)
                                                                                                        (("2"
                                                                                                          (hide-all-but
                                                                                                           (-2
                                                                                                            -3
                                                                                                            1))
                                                                                                          (("2"
                                                                                                            (lemma
                                                                                                             "equal?_sym")
                                                                                                            (("2"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "G"
                                                                                                               "select(f, s)(1)"
                                                                                                               "t1")
                                                                                                              (("2"
                                                                                                                (assert)
                                                                                                                (("2"
                                                                                                                  (lemma
                                                                                                                   "equal?_trans")
                                                                                                                  (("2"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "G"
                                                                                                                     "t3"
                                                                                                                     "select(f, s)(1)"
                                                                                                                     "t1")
                                                                                                                    (("2"
                                                                                                                      (assert)
                                                                                                                      nil
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil)
                                                                                   ("2"
                                                                                    (hide
                                                                                     1)
                                                                                    (("2"
                                                                                      (flatten)
                                                                                      (("2"
                                                                                        (expand
                                                                                         "map"
                                                                                         -1
                                                                                         1)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "count"
                                                                                           -1
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "map"
                                                                                             -1)
                                                                                            (("2"
                                                                                              (expand
                                                                                               "count"
                                                                                               -1
                                                                                               1)
                                                                                              (("2"
                                                                                                (lift-if)
                                                                                                (("2"
                                                                                                  (split
                                                                                                   -1)
                                                                                                  (("1"
                                                                                                    (flatten)
                                                                                                    (("1"
                                                                                                      (assert)
                                                                                                      nil
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (flatten)
                                                                                                    (("2"
                                                                                                      (expand
                                                                                                       "from_min2max"
                                                                                                       -1
                                                                                                       1)
                                                                                                      (("2"
                                                                                                        (lift-if)
                                                                                                        (("2"
                                                                                                          (split
                                                                                                           -1)
                                                                                                          (("1"
                                                                                                            (flatten)
                                                                                                            (("1"
                                                                                                              (expand
                                                                                                               "map"
                                                                                                               -2)
                                                                                                              (("1"
                                                                                                                (expand
                                                                                                                 "count"
                                                                                                                 -2)
                                                                                                                (("1"
                                                                                                                  (lift-if)
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (split)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "t3"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "equal?_ref")
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil)
                                                                                                           ("2"
                                                                                                            (flatten)
                                                                                                            (("2"
                                                                                                              (hide
                                                                                                               1)
                                                                                                              (("2"
                                                                                                                (expand
                                                                                                                 "map"
                                                                                                                 -1
                                                                                                                 1)
                                                                                                                (("2"
                                                                                                                  (expand
                                                                                                                   "count"
                                                                                                                   -1
                                                                                                                   1)
                                                                                                                  (("2"
                                                                                                                    (lift-if)
                                                                                                                    (("2"
                                                                                                                      (split
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (flatten)
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          nil
                                                                                                                          nil))
                                                                                                                        nil)
                                                                                                                       ("2"
                                                                                                                        (flatten)
                                                                                                                        (("2"
                                                                                                                          (expand
                                                                                                                           "t3"
                                                                                                                           1)
                                                                                                                          (("2"
                                                                                                                            (rewrite
                                                                                                                             "equal?_ref")
                                                                                                                            nil
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil)
                                                         ("2"
                                                          (flatten)
                                                          (("2"
                                                            (expand
                                                             "count"
                                                             -1
                                                             1)
                                                            (("2"
                                                              (expand
                                                               "get_args"
                                                               -1
                                                               1)
                                                              (("2"
                                                                (expand
                                                                 "from_min2max"
                                                                 -1)
                                                                (("2"
                                                                  (lift-if)
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (expand
                                                                       "map"
                                                                       -1
                                                                       1)
                                                                      (("2"
                                                                        (expand
                                                                         "count"
                                                                         -1
                                                                         1)
                                                                        (("2"
                                                                          (hide
                                                                           2)
                                                                          (("2"
                                                                            (lift-if)
                                                                            (("2"
                                                                              (split
                                                                               -1)
                                                                              (("1"
                                                                                (flatten)
                                                                                (("1"
                                                                                  (assert)
                                                                                  nil
                                                                                  nil))
                                                                                nil)
                                                                               ("2"
                                                                                (flatten)
                                                                                (("2"
                                                                                  (expand
                                                                                   "t1"
                                                                                   1)
                                                                                  (("2"
                                                                                    (rewrite
                                                                                     "equal?_ref")
                                                                                    nil
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (lemma "num_arg_ge1")
                                (("2"
                                  (inst?)
                                  (("2" (assert) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (lemma "num_arg_ge1")
                          (("2" (inst?) (("2" (assert) nil nil)) nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep) (("2" (rewrite "equal?_equiv") nil nil)) nil)) nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "equal?_equiv") nil nil)) nil))
      nil))
    nil)
   ((equal?_equiv formula-decl nil equality nil)
    (equal?_trans formula-decl nil equality nil)
    (equal?_sym formula-decl nil equality nil)
    (count_mem formula-decl nil list_theory nil)
    (num_arg_delete_size formula-decl nil term_properties nil)
    (count_gt0 formula-decl nil list_theory nil)
    (get_args_nth formula-decl nil term_properties nil)
    (nice_ind? const-decl "bool" term_properties nil)
    (get_args_len formula-decl nil term_properties nil)
    (perm?_equiv_same_count? formula-decl nil equality nil)
    (same_count? const-decl "bool" list_theory nil)
    (ac_perm_args2 formula-decl nil equality nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (count_append formula-decl nil list_theory nil)
    (delete def-decl "term" term_properties nil)
    (subs_perm_get_args_ge1 formula-decl nil substitution nil)
    (from_min2max def-decl "list[nat]" list_theory nil)
    (equal?_ref formula-decl nil equality nil)
    (select def-decl "term" term_properties nil)
    (num_arg def-decl "nat" term_properties nil)
    (subs_get_args1 formula-decl nil substitution nil)
    (subs def-decl "term" substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (equiv type-eq-decl nil list_theory nil)
    (count def-decl "nat" list_theory nil)
    (args type-eq-decl nil term_properties nil)
    (get_args const-decl "args" term_properties nil)
    (equal? def-decl "bool" equality nil)
    (fresh_context type-eq-decl nil freshness nil)
    (size def-decl "nat" term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (perm type-eq-decl nil atoms nil)
    (atom type-eq-decl nil atoms nil))
   nil))
 (count_subs_count_elem 0
  (count_subs_count_elem-1 nil 3886000287
   ("" (skeep)
    (("" (assert)
      ((""
        (name-replace "no_rep_args"
         "count_elem(null, null, get_args(f)(t), equal?(G))`1")
        ((""
          (name-replace "coef"
           "count_elem(null, null, get_args(f)(t), equal?(G))`2")
          (("" (flatten)
            (("" (lemma "count_subs_get_args")
              (("" (inst?)
                (("" (replace -1)
                  (("" (hide -1)
                    (("" (lemma "perm?_get_lst_mult_count_elem_cor")
                      (("" (inst -1 "G" "get_args(f)(t)")
                        (("" (assert)
                          (("" (reveal -4 -5)
                            (("" (replace -1)
                              ((""
                                (replace -2)
                                ((""
                                  (hide -1 -2)
                                  ((""
                                    (lemma "subs_perm?")
                                    ((""
                                      (inst?)
                                      ((""
                                        (inst -1 "G1" "sigma")
                                        ((""
                                          (assert)
                                          ((""
                                            (hide -2)
                                            ((""
                                              (use "count_vec_perm")
                                              ((""
                                                (lemma
                                                 "count_vec_perm")
                                                ((""
                                                  (inst?)
                                                  ((""
                                                    (inst
                                                     -1
                                                     "subs(sigma)(get_lst_mult(no_rep_args, coef))")
                                                    ((""
                                                      (assert)
                                                      ((""
                                                        (replace -1)
                                                        ((""
                                                          (hide -1 -2)
                                                          ((""
                                                            (use
                                                             "subs_get_lst_mult")
                                                            ((""
                                                              (replace
                                                               -1)
                                                              ((""
                                                                (hide
                                                                 -1)
                                                                ((""
                                                                  (use
                                                                   "count_vec_get_lst_mult")
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((count_subs_get_args formula-decl nil substitution nil)
    (perm?_get_lst_mult_count_elem_cor formula-decl nil equality nil)
    (get_lst_mult def-decl "list[T]" list_theory nil)
    (count_vec_perm formula-decl nil equality nil)
    (subs def-decl "args" substitution nil)
    (count_vec_get_lst_mult formula-decl nil equality nil)
    (subs_get_lst_mult formula-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (equal? def-decl "bool" equality nil)
    (fresh_context type-eq-decl nil freshness nil)
    (get_args const-decl "args" term_properties nil)
    (args type-eq-decl nil term_properties nil)
    (count_elem def-decl "[list[T], list[nat]]" list_theory nil)
    (equiv type-eq-decl nil list_theory nil)
    (variable type-eq-decl nil term_properties nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (perm type-eq-decl nil atoms nil)
    (atom type-eq-decl nil atoms nil))
   nil))
 (count_subs_subset_aux 0
  (count_subs_subset_aux-1 nil 3886000314
   ("" (measure-induct "length(args2)" "args2")
    (("1" (skolem 1 "args2")
      (("1" (prop)
        (("1" (hide -1)
          (("1" (skeep)
            (("1"
              (name-replace "no_rep_args"
               "count_elem(null, null, args1, equal?(G))`1")
              (("1"
                (name-replace "coef"
                 "count_elem(null, null, args1, equal?(G))`2")
                (("1"
                  (name-replace "no_rep_args1"
                   "count_coef(args2, args1, equal?(G))`1")
                  (("1"
                    (name-replace "coef1"
                     "count_coef(args2, args1, equal?(G))`2")
                    (("1" (expand "no_rep_args1" 1)
                      (("1" (expand "count_coef" 1 1)
                        (("1" (lift-if)
                          (("1" (prop)
                            (("1" (expand "subs" 1 2)
                              (("1"
                                (expand "count_vec" 1 2)
                                (("1"
                                  (expand "dot_product" 1 2)
                                  (("1"
                                    (case "null?(no_rep_args)")
                                    (("1" (grind) nil nil)
                                     ("2"
                                      (case "null?(args1)")
                                      (("1"
                                        (expand "no_rep_args" 1)
                                        (("1" (grind) nil nil))
                                        nil)
                                       ("2"
                                        (expand "subset_lst?" -2)
                                        (("2"
                                          (inst -2 "car(args1)")
                                          (("1" (grind) nil nil)
                                           ("2" (assert) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (name-replace "x" "car(args2)")
                              (("2"
                                (expand "subs" 2 2)
                                (("2"
                                  (expand "coef1" 2)
                                  (("2"
                                    (expand "count_coef" 2 2)
                                    (("2"
                                      (assert)
                                      (("2"
                                        (reveal -1)
                                        (("2"
                                          (replace -1)
                                          (("2"
                                            (case
                                             "count(x, args1, equal?(G)) > 0")
                                            (("1"
                                              (expand "count_vec" 2 2)
                                              (("1"
                                                (expand
                                                 "dot_product"
                                                 2
                                                 2)
                                                (("1"
                                                  (use
                                                   "count_gt0_2[term]")
                                                  (("1"
                                                    (assert)
                                                    (("1"
                                                      (skolem -1 "x1")
                                                      (("1"
                                                        (flatten)
                                                        (("1"
                                                          (reveal
                                                           -5
                                                           -6)
                                                          (("1"
                                                            (rewrite
                                                             "count_elem2_cor"
                                                             :dir
                                                             rl)
                                                            (("1"
                                                              (lemma
                                                               "count_elem_mem_nth")
                                                              (("1"
                                                                (inst
                                                                 -1
                                                                 "equal?(G)"
                                                                 "args1"
                                                                 "x1")
                                                                (("1"
                                                                  (assert)
                                                                  (("1"
                                                                    (rewrite
                                                                     "count_elem2_cor"
                                                                     :dir
                                                                     rl)
                                                                    (("1"
                                                                      (replace
                                                                       -2)
                                                                      (("1"
                                                                        (replace
                                                                         -3)
                                                                        (("1"
                                                                          (assert)
                                                                          (("1"
                                                                            (skolem
                                                                             -1
                                                                             "i")
                                                                            (("1"
                                                                              (flatten)
                                                                              (("1"
                                                                                (lemma
                                                                                 "dot_product_nth")
                                                                                (("1"
                                                                                  (inst
                                                                                   -1
                                                                                   "i"
                                                                                   "count_vec(subs(sigma)(no_rep_args), f, G1)(s)"
                                                                                   "coef")
                                                                                  (("1"
                                                                                    (prop)
                                                                                    (("1"
                                                                                      (replace
                                                                                       -1)
                                                                                      (("1"
                                                                                        (case
                                                                                         "=[nat](nth(count_vec(subs(sigma)(no_rep_args), f, G1)(s), i) * nth(coef, i), count(s, subs(sigma)(x), f, G1) * count(x, args1, equal?(G)))")
                                                                                        (("1"
                                                                                          (replace
                                                                                           -1)
                                                                                          (("1"
                                                                                            (assert)
                                                                                            (("1"
                                                                                              (hide
                                                                                               -1)
                                                                                              (("1"
                                                                                                (hide
                                                                                                 -1)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "count_vec_map")
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "remove_map")
                                                                                                    (("1"
                                                                                                      (rewrite
                                                                                                       "subs_map"
                                                                                                       :dir
                                                                                                       rl)
                                                                                                      (("1"
                                                                                                        (name-replace
                                                                                                         "x2"
                                                                                                         "nth(no_rep_args, i)")
                                                                                                        (("1"
                                                                                                          (hide
                                                                                                           -1
                                                                                                           -3)
                                                                                                          (("1"
                                                                                                            (reveal
                                                                                                             -14)
                                                                                                            (("1"
                                                                                                              (inst
                                                                                                               -1
                                                                                                               "cdr(args2)")
                                                                                                              (("1"
                                                                                                                (prop)
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "G"
                                                                                                                   "G1"
                                                                                                                   "remove(args1, x, equal?(G))"
                                                                                                                   "f"
                                                                                                                   "s"
                                                                                                                   "sigma")
                                                                                                                  (("1"
                                                                                                                    (prop)
                                                                                                                    (("1"
                                                                                                                      (rewrite
                                                                                                                       "count_elem2_cor"
                                                                                                                       :dir
                                                                                                                       rl)
                                                                                                                      (("1"
                                                                                                                        (rewrite
                                                                                                                         "subs_map")
                                                                                                                        (("1"
                                                                                                                          (rewrite
                                                                                                                           "count_vec_map")
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "subs_remove")
                                                                                                                            (("1"
                                                                                                                              (case
                                                                                                                               "count_elem2(remove(args1, x, equal?(G)), equal?(G))`1 = remove(no_rep_args, i) AND  count_elem2(remove(args1, x, equal?(G)), equal?(G))`2 = remove(coef, i)")
                                                                                                                              (("1"
                                                                                                                                (flatten)
                                                                                                                                (("1"
                                                                                                                                  (replace
                                                                                                                                   -1)
                                                                                                                                  (("1"
                                                                                                                                    (replace
                                                                                                                                     -2)
                                                                                                                                    (("1"
                                                                                                                                      (replace
                                                                                                                                       -3)
                                                                                                                                      (("1"
                                                                                                                                        (hide
                                                                                                                                         -1
                                                                                                                                         -2
                                                                                                                                         -3)
                                                                                                                                        (("1"
                                                                                                                                          (use
                                                                                                                                           "count_coef_remove_no_effect[term]")
                                                                                                                                          (("1"
                                                                                                                                            (prop)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -1)
                                                                                                                                              (("1"
                                                                                                                                                (propax)
                                                                                                                                                nil
                                                                                                                                                nil))
                                                                                                                                              nil)
                                                                                                                                             ("2"
                                                                                                                                              (hide
                                                                                                                                               3)
                                                                                                                                              (("2"
                                                                                                                                                (skolem
                                                                                                                                                 1
                                                                                                                                                 "y")
                                                                                                                                                (("2"
                                                                                                                                                  (prop)
                                                                                                                                                  (("2"
                                                                                                                                                    (expand
                                                                                                                                                     "dif_elem?"
                                                                                                                                                     -11)
                                                                                                                                                    (("2"
                                                                                                                                                      (rewrite
                                                                                                                                                       "member_nth2"
                                                                                                                                                       -1)
                                                                                                                                                      (("2"
                                                                                                                                                        (skolem
                                                                                                                                                         -1
                                                                                                                                                         "j")
                                                                                                                                                        (("2"
                                                                                                                                                          (inst
                                                                                                                                                           -11
                                                                                                                                                           "j+1"
                                                                                                                                                           "0")
                                                                                                                                                          (("2"
                                                                                                                                                            (assert)
                                                                                                                                                            (("2"
                                                                                                                                                              (typepred
                                                                                                                                                               "j")
                                                                                                                                                              (("2"
                                                                                                                                                                (expand
                                                                                                                                                                 "length"
                                                                                                                                                                 2)
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "nth"
                                                                                                                                                                   2)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (assert)
                                                                                                                                                                    nil
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil)
                                                                                                                               ("2"
                                                                                                                                (hide
                                                                                                                                 3)
                                                                                                                                (("2"
                                                                                                                                  (hide
                                                                                                                                   -1)
                                                                                                                                  (("2"
                                                                                                                                    (lemma
                                                                                                                                     "count_elem_remove")
                                                                                                                                    (("2"
                                                                                                                                      (inst
                                                                                                                                       -1
                                                                                                                                       "equal?(G)"
                                                                                                                                       "i"
                                                                                                                                       "args1")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (split
                                                                                                                                           -1)
                                                                                                                                          (("1"
                                                                                                                                            (rewrite
                                                                                                                                             "count_elem2_cor"
                                                                                                                                             :dir
                                                                                                                                             rl)
                                                                                                                                            (("1"
                                                                                                                                              (replace
                                                                                                                                               -3)
                                                                                                                                              (("1"
                                                                                                                                                (replace
                                                                                                                                                 -4)
                                                                                                                                                (("1"
                                                                                                                                                  (rewrite
                                                                                                                                                   "count_elem2_cor"
                                                                                                                                                   :dir
                                                                                                                                                   rl)
                                                                                                                                                  (("1"
                                                                                                                                                    (reveal
                                                                                                                                                     -6)
                                                                                                                                                    (("1"
                                                                                                                                                      (replace
                                                                                                                                                       -1)
                                                                                                                                                      (("1"
                                                                                                                                                        (hide
                                                                                                                                                         -1)
                                                                                                                                                        (("1"
                                                                                                                                                          (lemma
                                                                                                                                                           "remove_elem_eq[term]")
                                                                                                                                                          (("1"
                                                                                                                                                            (inst
                                                                                                                                                             -1
                                                                                                                                                             "equal?(G)"
                                                                                                                                                             "args1"
                                                                                                                                                             "x"
                                                                                                                                                             "x2")
                                                                                                                                                            (("1"
                                                                                                                                                              (assert)
                                                                                                                                                              (("1"
                                                                                                                                                                (split
                                                                                                                                                                 -1)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -1)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replace
                                                                                                                                                                     -2
                                                                                                                                                                     :dir
                                                                                                                                                                     rl)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (assert)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil)
                                                                                                                                                                 ("2"
                                                                                                                                                                  (hide-all-but
                                                                                                                                                                   (-2
                                                                                                                                                                    -5
                                                                                                                                                                    1))
                                                                                                                                                                  (("2"
                                                                                                                                                                    (lemma
                                                                                                                                                                     "equal?_trans")
                                                                                                                                                                    (("2"
                                                                                                                                                                      (inst
                                                                                                                                                                       -1
                                                                                                                                                                       "G"
                                                                                                                                                                       "x"
                                                                                                                                                                       "x1"
                                                                                                                                                                       "x2")
                                                                                                                                                                      (("2"
                                                                                                                                                                        (assert)
                                                                                                                                                                        nil
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil)
                                                                                                                                           ("2"
                                                                                                                                            (hide
                                                                                                                                             2)
                                                                                                                                            (("2"
                                                                                                                                              (reveal
                                                                                                                                               -4)
                                                                                                                                              (("2"
                                                                                                                                                (expand
                                                                                                                                                 "no_rep_args"
                                                                                                                                                 -1)
                                                                                                                                                (("2"
                                                                                                                                                  (propax)
                                                                                                                                                  nil
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("2"
                                                                                                                      (hide
                                                                                                                       3)
                                                                                                                      (("2"
                                                                                                                        (expand
                                                                                                                         "subset_lst?"
                                                                                                                         1)
                                                                                                                        (("2"
                                                                                                                          (skolem
                                                                                                                           1
                                                                                                                           "y")
                                                                                                                          (("2"
                                                                                                                            (prop)
                                                                                                                            (("2"
                                                                                                                              (expand
                                                                                                                               "subset_lst?"
                                                                                                                               -9)
                                                                                                                              (("2"
                                                                                                                                (inst
                                                                                                                                 -9
                                                                                                                                 "y")
                                                                                                                                (("2"
                                                                                                                                  (prop)
                                                                                                                                  (("1"
                                                                                                                                    (expand
                                                                                                                                     "member"
                                                                                                                                     -1)
                                                                                                                                    (("1"
                                                                                                                                      (assert)
                                                                                                                                      (("1"
                                                                                                                                        (replace
                                                                                                                                         -1)
                                                                                                                                        (("1"
                                                                                                                                          (replace
                                                                                                                                           -9)
                                                                                                                                          (("1"
                                                                                                                                            (use
                                                                                                                                             "remove_elem_cor[term]")
                                                                                                                                            (("1"
                                                                                                                                              (use
                                                                                                                                               "count0_eq[term]")
                                                                                                                                              (("1"
                                                                                                                                                (assert)
                                                                                                                                                (("1"
                                                                                                                                                  (inst
                                                                                                                                                   1
                                                                                                                                                   "x")
                                                                                                                                                  (("1"
                                                                                                                                                    (assert)
                                                                                                                                                    (("1"
                                                                                                                                                      (use
                                                                                                                                                       "equal?_ref")
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil)
                                                                                                                                   ("2"
                                                                                                                                    (use
                                                                                                                                     "remove_elem_mem2[term]")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      nil
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil)
                                                                                                                     ("3"
                                                                                                                      (hide
                                                                                                                       3)
                                                                                                                      (("3"
                                                                                                                        (expand
                                                                                                                         "dif_elem?"
                                                                                                                         1)
                                                                                                                        (("3"
                                                                                                                          (skolem
                                                                                                                           1
                                                                                                                           ("n1"
                                                                                                                            "n2"))
                                                                                                                          (("3"
                                                                                                                            (prop)
                                                                                                                            (("3"
                                                                                                                              (expand
                                                                                                                               "dif_elem?"
                                                                                                                               -12)
                                                                                                                              (("3"
                                                                                                                                (inst
                                                                                                                                 -12
                                                                                                                                 "n1+1"
                                                                                                                                 "n2+1")
                                                                                                                                (("3"
                                                                                                                                  (assert)
                                                                                                                                  (("3"
                                                                                                                                    (expand
                                                                                                                                     "length"
                                                                                                                                     3)
                                                                                                                                    (("3"
                                                                                                                                      (expand
                                                                                                                                       "nth"
                                                                                                                                       3)
                                                                                                                                      (("3"
                                                                                                                                        (propax)
                                                                                                                                        nil
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   3)
                                                                                                                  (("2"
                                                                                                                    (grind)
                                                                                                                    nil
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil)
                                                                                         ("2"
                                                                                          (hide
                                                                                           3)
                                                                                          (("2"
                                                                                            (hide
                                                                                             -1)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -3)
                                                                                              (("2"
                                                                                                (rewrite
                                                                                                 "count_vec_nth"
                                                                                                 1)
                                                                                                (("1"
                                                                                                  (rewrite
                                                                                                   "subs_map"
                                                                                                   :dir
                                                                                                   rl)
                                                                                                  (("1"
                                                                                                    (rewrite
                                                                                                     "map_nth_rw"
                                                                                                     1)
                                                                                                    (("1"
                                                                                                      (name-replace
                                                                                                       "x2"
                                                                                                       "nth(no_rep_args, i)")
                                                                                                      (("1"
                                                                                                        (lemma
                                                                                                         "count_eq[term]")
                                                                                                        (("1"
                                                                                                          (inst
                                                                                                           -1
                                                                                                           "equal?(G)"
                                                                                                           "args1"
                                                                                                           "x"
                                                                                                           "x1")
                                                                                                          (("1"
                                                                                                            (assert)
                                                                                                            (("1"
                                                                                                              (replace
                                                                                                               -1)
                                                                                                              (("1"
                                                                                                                (lemma
                                                                                                                 "count_eq2")
                                                                                                                (("1"
                                                                                                                  (inst
                                                                                                                   -1
                                                                                                                   "G1"
                                                                                                                   "f"
                                                                                                                   "s"
                                                                                                                   "subs(sigma)(x)"
                                                                                                                   "subs(sigma)(x2)")
                                                                                                                  (("1"
                                                                                                                    (assert)
                                                                                                                    (("1"
                                                                                                                      (hide
                                                                                                                       2)
                                                                                                                      (("1"
                                                                                                                        (lemma
                                                                                                                         "subs_equal?")
                                                                                                                        (("1"
                                                                                                                          (assert)
                                                                                                                          (("1"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "G"
                                                                                                                             "G1"
                                                                                                                             "x2"
                                                                                                                             "sigma"
                                                                                                                             "x")
                                                                                                                            (("1"
                                                                                                                              (assert)
                                                                                                                              (("1"
                                                                                                                                (lemma
                                                                                                                                 "equal?_trans")
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -1
                                                                                                                                   "G"
                                                                                                                                   "x"
                                                                                                                                   "x1"
                                                                                                                                   "x2")
                                                                                                                                  (("1"
                                                                                                                                    (assert)
                                                                                                                                    nil
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil)
                                                                                                 ("2"
                                                                                                  (rewrite
                                                                                                   "subs_len")
                                                                                                  nil
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("2"
                                                                                      (hide
                                                                                       3)
                                                                                      (("2"
                                                                                        (rewrite
                                                                                         "count_vec_len")
                                                                                        (("2"
                                                                                          (rewrite
                                                                                           "subs_len")
                                                                                          nil
                                                                                          nil))
                                                                                        nil))
                                                                                      nil)
                                                                                     ("3"
                                                                                      (hide-all-but
                                                                                       (-1
                                                                                        1))
                                                                                      (("3"
                                                                                        (expand
                                                                                         "coef"
                                                                                         1)
                                                                                        (("3"
                                                                                          (expand
                                                                                           "no_rep_args"
                                                                                           -1)
                                                                                          (("3"
                                                                                            (use
                                                                                             "count_elem_len[term]")
                                                                                            (("3"
                                                                                              (assert)
                                                                                              (("3"
                                                                                                (assert)
                                                                                                (("3"
                                                                                                  (expand
                                                                                                   "length"
                                                                                                   1)
                                                                                                  (("3"
                                                                                                    (propax)
                                                                                                    nil
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (case
                                               "count(x, args1, equal?(G)) = 0")
                                              (("1"
                                                (expand
                                                 "count_vec"
                                                 3
                                                 2)
                                                (("1"
                                                  (expand
                                                   "dot_product"
                                                   3
                                                   2)
                                                  (("1"
                                                    (replace -1)
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (reveal -6)
                                                        (("1"
                                                          (hide 1)
                                                          (("1"
                                                            (inst
                                                             -1
                                                             "cdr(args2)")
                                                            (("1"
                                                              (prop)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (prop)
                                                                  (("1"
                                                                    (reveal
                                                                     -5
                                                                     -6)
                                                                    (("1"
                                                                      (replace
                                                                       -1)
                                                                      (("1"
                                                                        (replace
                                                                         -2)
                                                                        (("1"
                                                                          (propax)
                                                                          nil
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (hide
                                                                     3)
                                                                    (("2"
                                                                      (expand
                                                                       "subset_lst?"
                                                                       1)
                                                                      (("2"
                                                                        (skolem
                                                                         1
                                                                         "y")
                                                                        (("2"
                                                                          (prop)
                                                                          (("2"
                                                                            (expand
                                                                             "subset_lst?"
                                                                             -4)
                                                                            (("2"
                                                                              (inst
                                                                               -4
                                                                               "y")
                                                                              (("2"
                                                                                (assert)
                                                                                (("2"
                                                                                  (expand
                                                                                   "member"
                                                                                   -4)
                                                                                  (("2"
                                                                                    (use
                                                                                     "count0_eq[term]")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (inst
                                                                                         1
                                                                                         "y")
                                                                                        (("2"
                                                                                          (assert)
                                                                                          (("2"
                                                                                            (replace
                                                                                             -4)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -3)
                                                                                              (("2"
                                                                                                (use
                                                                                                 "equal?_ref")
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil)
                                                                   ("3"
                                                                    (hide
                                                                     3)
                                                                    (("3"
                                                                      (expand
                                                                       "dif_elem?"
                                                                       1)
                                                                      (("3"
                                                                        (skeep)
                                                                        (("3"
                                                                          (expand
                                                                           "dif_elem?"
                                                                           -7)
                                                                          (("3"
                                                                            (inst
                                                                             -7
                                                                             "i+1 "
                                                                             "j+1")
                                                                            (("3"
                                                                              (grind)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil)
                                               ("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (hide 2)
      (("2" (skeep)
        (("2" (skeep) (("2" (rewrite "equal?_equiv") nil nil)) nil))
        nil))
      nil)
     ("3" (hide 2)
      (("3" (skeep) (("3" (rewrite "equal?_equiv") nil nil)) nil)) nil)
     ("4" (hide 2)
      (("4" (skeep) (("4" (rewrite "equal?_equiv") nil nil)) nil))
      nil))
    nil)
   ((equal?_equiv formula-decl nil equality nil)
    (count_gt0_2 formula-decl nil list_theory nil)
    (count_elem_mem_nth formula-decl nil more_list_theory_props nil)
    (count_elem_len formula-decl nil list_theory nil)
    (count_vec_len formula-decl nil equality nil)
    (subs_len formula-decl nil substitution nil)
    (count_eq2 formula-decl nil equality nil)
    (count_eq formula-decl nil list_theory nil)
    (count_vec_nth formula-decl nil equality nil)
    (count_vec_map formula-decl nil equality nil)
    (subs_map formula-decl nil substitution nil)
    (remove def-decl "list[T]" list_theory nil)
    (count0_eq formula-decl nil list_theory nil)
    (equal?_ref formula-decl nil equality nil)
    (remove_elem_cor formula-decl nil list_theory nil)
    (remove_elem_mem2 formula-decl nil list_theory nil)
    (count_elem2 def-decl "[list[T], list[nat]]" list_theory nil)
    (remove def-decl "list[T]" list_theory nil)
    (count_coef_remove_no_effect formula-decl nil list_theory nil)
    (member_nth2 formula-decl nil list_theory nil)
    (remove_elem_eq formula-decl nil list_theory nil)
    (equal?_trans formula-decl nil equality nil)
    (count_elem_remove formula-decl nil more_list_theory_props nil)
    (subs_remove formula-decl nil substitution nil)
    (remove_map formula-decl nil map_theory nil)
    (count const-decl "nat" equality nil)
    (subs def-decl "term" substitution nil)
    (dot_product_nth formula-decl nil more_list_theory_props nil)
    (count_elem2_cor formula-decl nil more_list_theory_props nil)
    (equiv type-eq-decl nil more_list_theory_props nil)
    (count def-decl "nat" list_theory nil)
    (get_args const-decl "args" term_properties nil)
    (count const-decl "nat" equality nil)
    (subs def-decl "args" substitution nil)
    (count_vec def-decl "list[nat]" equality nil)
    (dot_product def-decl "nat" list_nat_theory nil)
    (dif_elem? const-decl "bool" list_theory nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (count_coef def-decl "[list[T], list[nat]]" list_theory nil)
    (subset_lst? const-decl "bool" list_theory nil)
    (equiv type-eq-decl nil list_theory nil)
    (count_elem def-decl "[list[T], list[nat]]" list_theory nil)
    (equal? def-decl "bool" equality nil)
    (fresh_context type-eq-decl nil freshness nil)
    (variable type-eq-decl nil term_properties nil)
    (args type-eq-decl nil term_properties nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (perm type-eq-decl nil atoms nil)
    (atom type-eq-decl nil atoms nil))
   nil))
 (count_subs_subset 0
  (count_subs_subset-1 nil 3886000348
   ("" (skeep)
    (("" (assert)
      (("" (prop)
        (("" (lemma "count_subs_count_elem")
          (("" (inst?)
            (("" (inst -1 "G")
              (("" (assert)
                (("" (assert)
                  (("" (replace -1)
                    (("" (hide -1)
                      (("" (lemma "count_subs_subset_aux")
                        ((""
                          (inst -1 "G" "G1" "get_args(f)(t)" "args1"
                           "f" "s" "sigma")
                          (("" (assert) nil nil)) nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((args type-eq-decl nil term_properties nil)
    (get_args const-decl "args" term_properties nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil))
   shostak))
 (count_subs_subset2 0
  (count_subs_subset2-1 nil 3887918851
   ("" (skeep)
    (("" (assert)
      ((""
        (name-replace "no_rep_args"
         "count_coef(args1, get_args(f)(t), equal?(G))`1")
        ((""
          (name-replace "coef"
           "count_coef(args1, get_args(f)(t), equal?(G))`2")
          (("" (reveal -1)
            (("" (reveal -2)
              (("" (prop)
                (("" (lemma "count_subs_subset")
                  ((""
                    (inst -1 "G" "G1" "args1" "f" "s"
                     "append(sigma, delta)" "t")
                    (("" (assert)
                      (("" (assert)
                        (("" (replace -2)
                          (("" (replace -3)
                            (("" (prop)
                              (("1"
                                (rewrite "subs_append2" -1)
                                (("1"
                                  (rewrite "subs_append_args" -1)
                                  (("1"
                                    (case "subs(delta)(t) = t")
                                    (("1"
                                      (replace -1)
                                      (("1"
                                        (case
                                         "subs(delta)(no_rep_args) = no_rep_args")
                                        (("1"
                                          (replace -1)
                                          (("1" (propax) nil nil))
                                          nil)
                                         ("2"
                                          (expand "no_rep_args" 1)
                                          (("2"
                                            (rewrite "count_coef1" 1)
                                            (("2"
                                              (use
                                               "subs_no_effect_args")
                                              (("2" (assert) nil nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (hide -1 -2 -3 2)
                                      (("2"
                                        (use "subs_no_effect_t")
                                        (("2"
                                          (assert)
                                          (("2"
                                            (case
                                             "subset?(vars(t), vars(args1))")
                                            (("1"
                                              (hide-all-but (-1 -6 1))
                                              (("1"
                                                (expand "disjoint?")
                                                (("1"
                                                  (expand
                                                   ("empty?"
                                                    "subset?"))
                                                  (("1"
                                                    (skeep)
                                                    (("1"
                                                      (inst?)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (expand
                                                           ("member"
                                                            "intersection")
                                                           -2)
                                                          (("1"
                                                            (expand
                                                             ("member"
                                                              "intersection")
                                                             1)
                                                            (("1"
                                                              (prop)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil)
                                             ("2"
                                              (hide-all-but (-1 1))
                                              (("2"
                                                (use "vars_get_args")
                                                (("2"
                                                  (replace
                                                   -1
                                                   1
                                                   :dir
                                                   rl)
                                                  (("2"
                                                    (expand "subset?")
                                                    (("2"
                                                      (skeep)
                                                      (("2"
                                                        (rewrite
                                                         "vars_args"
                                                         -2)
                                                        (("2"
                                                          (skolem
                                                           -2
                                                           "t1")
                                                          (("2"
                                                            (expand
                                                             "subset_lst?")
                                                            (("2"
                                                              (inst
                                                               -3
                                                               "t1")
                                                              (("2"
                                                                (flatten)
                                                                (("2"
                                                                  (prop)
                                                                  (("2"
                                                                    (rewrite
                                                                     "vars_args"
                                                                     1)
                                                                    (("2"
                                                                      (inst
                                                                       1
                                                                       "t1")
                                                                      (("2"
                                                                        (prop)
                                                                        nil
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (use "fresh_subs_append_subs2")
                                (("2"
                                  (assert)
                                  (("2"
                                    (hide-all-but (-6 1))
                                    (("2"
                                      (expand "disjoint?")
                                      (("2"
                                        (expand "empty?")
                                        (("2"
                                          (skeep)
                                          (("2" (grind) nil nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_append_args formula-decl nil substitution nil)
    (subset_lst? const-decl "bool" list_theory nil)
    (vars_args formula-decl nil term_properties nil)
    (vars_get_args formula-decl nil term_properties nil)
    (vars def-decl "finite_set[variable]" term_properties nil)
    (vars def-decl "finite_set[variable]" term_properties nil)
    (subs_no_effect_t formula-decl nil substitution nil)
    (subs_no_effect_args formula-decl nil substitution nil)
    (count_coef1 formula-decl nil list_theory nil)
    (subs def-decl "args" substitution nil)
    (subs def-decl "term" substitution nil)
    (subs_append2 formula-decl nil substitution nil)
    (img const-decl
     "finite_set[term[atom, perm, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (subs const-decl "term" substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (equal? def-decl "bool" equality nil)
    (fresh_context type-eq-decl nil freshness nil)
    (get_args const-decl "args" term_properties nil)
    (args type-eq-decl nil term_properties nil)
    (count_coef def-decl "[list[T], list[nat]]" list_theory nil)
    (equiv type-eq-decl nil list_theory nil)
    (variable type-eq-decl nil term_properties nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (perm type-eq-decl nil atoms nil)
    (atom type-eq-decl nil atoms nil))
   shostak))
 (fresh_subs?_var 0
  (fresh_subs?_var-1 nil 3882713120
   ("" (induct "Nabla")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("hd" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (name-replace "a" "hd`1")
            (("2" (name-replace "X" "hd`2")
              (("2" (expand "fresh_subs?" 1)
                (("2" (expand "x" 1)
                  (("2" (lift-if)
                    (("2" (prop)
                      (("1" (expand "subset?" 1)
                        (("1" (skeep)
                          (("1" (rewrite "vars_append_context" -3)
                            (("1" (expand ("member" "union") -3)
                              (("1"
                                (prop)
                                (("1"
                                  (use "vars_fresh?")
                                  (("1"
                                    (expand "subset?" -1)
                                    (("1"
                                      (inst -1 "x")
                                      (("1"
                                        (assert)
                                        (("1"
                                          (use "vars_subs_t")
                                          (("1"
                                            (expand "subset?" -1)
                                            (("1"
                                              (inst -1 "x")
                                              (("1"
                                                (assert)
                                                (("1"
                                                  (expand
                                                   ("member" "union")
                                                   -1)
                                                  (("1"
                                                    (expand
                                                     ("member" "union")
                                                     1)
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil)
                                 ("2"
                                  (inst -6 "sigma")
                                  (("2"
                                    (expand "subset?" -6)
                                    (("2"
                                      (inst -6 "x")
                                      (("2"
                                        (assert)
                                        (("2" (grind) nil nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (hide-all-but 2) (("2" (grind) nil nil))
                        nil)
                       ("3" (hide-all-but 2) (("3" (grind) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((x const-decl "[fresh_context, bool]" freshness nil)
    (vars_fresh? formula-decl nil freshness nil)
    (vars_subs_t formula-decl nil substitution nil)
    (vars def-decl "finite_set[variable]" term_properties nil)
    (vars_append_context formula-decl nil freshness nil)
    (fresh? def-decl "[fresh_context, bool]" freshness nil)
    (subs def-decl "term" substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" term_adt
       nil)
    (subs const-decl "term" substitution nil)
    (dom const-decl "finite_set[variable]" substitution nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (img const-decl
     "finite_set[term[atom, perm, variable, f_symbol, ac_symbol]]"
     substitution nil)
    (vars def-decl "finite_set[variable]" term_properties nil)
    (vars def-decl "finite_set[variable]" freshness nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil))
   shostak))
 (fresh_subs?_null 0
  (fresh_subs?_null-1 nil 3887991420
   ("" (induct "Delta")
    (("1" (grind) nil nil)
     ("2" (grind) (("2" (decompose-equality 1) nil nil)) nil))
    nil)
   ((x const-decl "[fresh_context, bool]" freshness nil)
    (fresh? def-decl "[fresh_context, bool]" freshness nil)
    (act def-decl "atom" atoms nil)
    (subs def-decl "term" substitution nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil))
   shostak))
 (fresh_subs?_character 0
  (fresh_subs?_character-1 nil 3887991582
   ("" (induct "Delta")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("ax" "tail"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "fresh_subs?" 1)
            (("2" (inst -1 "sigma")
              (("2" (iff)
                (("2" (flatten)
                  (("2" (split 1)
                    (("1" (flatten)
                      (("1" (skeep)
                        (("1" (expand "x")
                          (("1" (hide -4)
                            (("1" (prop)
                              (("1"
                                (expand "member" -4)
                                (("1"
                                  (split)
                                  (("1"
                                    (decompose-equality -1)
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (inst -2 "a" "X")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil)
                     ("2" (hide -1)
                      (("2" (prop)
                        (("1" (expand "x")
                          (("1" (prop)
                            (("1" (inst -2 "ax`1" "ax`2")
                              (("1"
                                (assert)
                                (("1"
                                  (expand "member")
                                  (("1" (propax) nil nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (skeep)
                          (("2" (inst -2 "a" "X")
                            (("2" (expand "member" -2)
                              (("2" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((x const-decl "[fresh_context, bool]" freshness nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" term_adt
       nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs def-decl "term" substitution nil)
    (fresh? def-decl "[fresh_context, bool]" freshness nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil))
   nil))
 (fresh_subs?_append_context 0
  (fresh_subs?_append_context-1 nil 3887991615
   ("" (induct "Delta")
    (("1" (grind)
      (("1" (expand "fresh_subs?")
        (("1" (lift-if)
          (("1" (prop)
            (("1" (assert) nil nil)
             ("2" (expand "x")
              (("2" (lift-if)
                (("2" (assert) (("2" (prop) nil nil)) nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("2" (skolem 1 ("ax" "Delta"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "append" 1)
            (("2" (expand "fresh_subs?" 1 (1 2))
              (("2" (inst -1 "Nabla" "sigma")
                (("2" (replaces -1)
                  (("2" (expand "x")
                    (("2" (grind)
                      (("2" (rewrite "append_assoc") nil nil)) nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* adt-constructor-decl "[[perm, variable] -> (var?)]" term_adt
       nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs def-decl "term" substitution nil)
    (fresh? def-decl "[fresh_context, bool]" freshness nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (x const-decl "[fresh_context, bool]" freshness nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil))
   nil))
 (fresh_subs?_is_fresh 0
  (fresh_subs?_is_fresh-1 nil 3887991680
   ("" (induct "Delta")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skolem 1 ("head" "tail"))
      (("3" (prop)
        (("3" (skeep*)
          (("3" (expand "fresh_subs?" (-2 1))
            (("3" (expand "x")
              (("3" (prop)
                (("3" (assert)
                  (("3" (expand "member" -6)
                    (("3" (split)
                      (("1" (decompose-equality -1)
                        (("1" (replace -1 -3 rl)
                          (("1" (replace -2 -3 rl)
                            (("1" (replace -2 1 rl)
                              (("1"
                                (replace -1 1 rl)
                                (("1"
                                  (lemma
                                   "fresh?_is_fresh"
                                   ("Delta"
                                    "fresh?(a, subs(sigma)((: :) * X))`1"
                                    "a"
                                    "a"
                                    "t"
                                    "subs(sigma)((: :) * X)"))
                                  (("1"
                                    (assert)
                                    (("1"
                                      (lemma
                                       "fresh_weakening"
                                       ("Delta"
                                        "fresh?(a, subs(sigma)((: :) * X))`1"
                                        "Nabla"
                                        "append(fresh?(a, subs(sigma)((: :) * X))`1,fresh_subs?(sigma, tail)`1)"
                                        "a"
                                        "a"
                                        "t"
                                        "subs(sigma)((: :) * X)"))
                                      (("1"
                                        (assert)
                                        (("1"
                                          (skeep)
                                          (("1"
                                            (rewrite "member_append" 1)
                                            (("1" (assert) nil nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil)
                       ("2" (inst -6 "sigma")
                        (("2" (assert)
                          (("2" (inst -6 "a" "X")
                            (("2"
                              (lemma "fresh_weakening"
                               ("Delta"
                                "fresh_subs?(sigma, tail)`1"
                                "Nabla"
                                "append(fresh?(head`1, subs(sigma)((: :) * head`2))`1, fresh_subs?(sigma, tail)`1)"
                                "a"
                                "a"
                                "t"
                                "subs(sigma)((: :) * X)"))
                              (("2"
                                (assert)
                                (("2"
                                  (assert)
                                  (("2"
                                    (skeep)
                                    (("2"
                                      (rewrite "member_append")
                                      (("2" (assert) nil nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((x const-decl "[fresh_context, bool]" freshness nil)
    (fresh?_is_fresh formula-decl nil freshness nil)
    (fresh? def-decl "[fresh_context, bool]" freshness nil)
    (fresh_weakening formula-decl nil freshness nil)
    (member_append formula-decl nil list_theory nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" term_adt
       nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs def-decl "term" substitution nil)
    (fresh def-decl "bool" freshness nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil))
   nil))
 (fresh_subs?_is_fresh2 0
  (fresh_subs?_is_fresh2-1 nil 3887992329
   ("" (induct "t")
    (("1" (grind) nil nil)
     ("2" (grind)
      (("2" (rewrite "subs_const")
        (("2" (expand "fresh") (("2" (propax) nil nil)) nil)) nil))
      nil)
     ("3" (skolem 1 ("pi" "X"))
      (("3" (skeep)
        (("3" (expand "fresh" -2)
          (("3" (lemma "subs_ext")
            (("3" (inst -1 "pi" "sigma" "(::)*X")
              (("3" (expand "ext" -1 1)
                (("3" (rewrite "append_null")
                  (("3" (replaces -1)
                    (("3" (rewrite "ext_reverse_fresh")
                      (("3"
                        (lemma "fresh_subs?_is_fresh"
                         ("Delta" "Delta" "sigma" "sigma"))
                        (("3" (assert)
                          (("3" (assert)
                            (("3" (inst -1 "act(reverse(pi))(a)" X)
                              (("3" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("4" (grind)
      (("4" (rewrite "subs_unit" 1)
        (("4" (expand "fresh") (("4" (propax) nil nil)) nil)) nil))
      nil)
     ("5" (skeep*)
      (("5" (rewrite "subs_pair")
        (("5" (expand "fresh" (-4 1))
          (("5" (inst -1 "Delta" "a" "sigma")
            (("5" (inst -2 "Delta" "a" "sigma")
              (("5" (flatten) (("5" (assert) nil nil)) nil)) nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (grind)
      (("6" (rewrite "subs_app")
        (("6" (expand "fresh" 1) (("6" (propax) nil nil)) nil)) nil))
      nil)
     ("7" (grind)
      (("7" (rewrite "subs_ac")
        (("7" (expand "fresh" 1) (("7" (propax) nil nil)) nil)) nil))
      nil)
     ("8" (skeep*)
      (("8" (rewrite "subs_abs")
        (("8" (expand "fresh" (-3 1))
          (("8" (split -3)
            (("1" (assert) nil nil)
             ("2" (prop)
              (("2" (inst -2 "Delta" "a" "sigma")
                (("2" (assert) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_abs formula-decl nil substitution nil)
    (subs_ac formula-decl nil substitution nil)
    (subs_app formula-decl nil substitution nil)
    (subs_pair formula-decl nil substitution nil)
    (subs_unit formula-decl nil substitution nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" term_adt
       nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ext_reverse_fresh formula-decl nil freshness nil)
    (act def-decl "atom" atoms nil)
    (ext def-decl "term" term_properties nil)
    (subs_ext formula-decl nil substitution nil)
    (subs_const formula-decl nil substitution nil)
    (term_induction formula-decl nil term_adt nil)
    (atom type-eq-decl nil atoms nil) (perm type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (subs def-decl "term" substitution nil)
    (fresh def-decl "bool" freshness nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (fresh_context type-eq-decl nil freshness nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil))
   nil))
 (fresh_subs?_is_fresh3 0
  (fresh_subs?_is_fresh3-2 nil 3887997786
   ("" (induct "t")
    (("1" (grind)
      (("1" (grind)
        (("1" (rewrite "subs_const" 1) (("1" (grind) nil nil)) nil))
        nil)
       ("2" (rewrite "subs_const") (("2" (grind) nil nil)) nil))
      nil)
     ("2" (skolem 1 ("pi" "X"))
      (("2" (skeep)
        (("2" (expand "fresh?" 1 (2 3))
          (("2" (expand "x")
            (("2" (rewrite "append_null")
              (("2"
                (lemma "ext_reverse_fresh?"
                 ("a" "a" "pi" "pi" "t" "subs(sigma)(null * X)"))
                (("2"
                  (lemma "subs_ext"
                   ("pi" "pi" "sigma" "sigma" "t" "null * X"))
                  (("2" (expand* "fresh_subs?" "x")
                    (("2" (expand "ext" -1 1)
                      (("2" (rewrite "append_null")
                        (("2" (replaces -1)
                          (("2" (replace -1 1 rl)
                            (("2" (expand "fresh_subs?")
                              (("2"
                                (rewrite "append_null")
                                (("2"
                                  (lift-if)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (prop)
                                      (("2"
                                        (hide -1)
                                        (("2"
                                          (lemma
                                           "not_fresh_is_null"
                                           ("a"
                                            "a"
                                            "t"
                                            "ext(pi)(subs(sigma)(null * X))"))
                                          (("2"
                                            (assert)
                                            (("2"
                                              (decompose-equality 2)
                                              nil
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (grind)
      (("3" (rewrite "subs_unit" 1) (("3" (grind) nil nil)) nil)) nil)
     ("4" (skeep*)
      (("4" (rewrite "subs_pair")
        (("4" (expand "fresh?" 1)
          (("4" (inst -1 "a" "sigma")
            (("4" (inst -2 "a" "sigma")
              (("4" (replaces -1)
                (("4" (replaces -1)
                  (("4" (expand "x" 1 (5 6))
                    (("4" (lift-if)
                      (("4" (prop)
                        (("1" (rewrite "fresh_subs?_append_context")
                          (("1" (expand "x")
                            (("1" (grind)
                              (("1"
                                (rewrite "append_null")
                                (("1"
                                  (rewrite "append_null")
                                  (("1"
                                    (rewrite "append_null")
                                    nil
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "x") (("2" (assert) nil nil))
                          nil)
                         ("3" (expand "x") (("3" (assert) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skeep)
      (("5" (skeep)
        (("5" (rewrite "subs_app" 1)
          (("5" (expand "fresh?" 1)
            (("5" (inst -1 "a" "sigma") nil nil)) nil))
          nil))
        nil))
      nil)
     ("6" (skeep)
      (("6" (skeep)
        (("6" (rewrite "subs_ac" 1)
          (("6" (expand "fresh?" 1)
            (("6" (inst -1 "a" "sigma") nil nil)) nil))
          nil))
        nil))
      nil)
     ("7" (skeep*)
      (("7" (rewrite "subs_abs" 1)
        (("7" (expand "fresh?" 1)
          (("7" (lift-if)
            (("7" (prop)
              (("1" (hide -2) (("1" (grind) nil nil)) nil)
               ("2" (inst -1 "a" "sigma") nil nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_abs formula-decl nil substitution nil)
    (subs_ac formula-decl nil substitution nil)
    (subs_app formula-decl nil substitution nil)
    (subs_pair formula-decl nil substitution nil)
    (subs_unit formula-decl nil substitution nil)
    (act def-decl "atom" atoms nil)
    (subs_ext formula-decl nil substitution nil)
    (ext def-decl "term" term_properties nil)
    (not_fresh_is_null formula-decl nil freshness nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" term_adt
       nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (ext_reverse_fresh? formula-decl nil freshness nil)
    (subs_const formula-decl nil substitution nil)
    (term_induction formula-decl nil term_adt nil)
    (atom type-eq-decl nil atoms nil) (perm type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (x const-decl "[fresh_context, bool]" freshness nil)
    (subs def-decl "term" substitution nil)
    (fresh? def-decl "[fresh_context, bool]" freshness nil)
    (fresh_context type-eq-decl nil freshness nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil))
   nil)
  (fresh_subs?_is_fresh3-1 nil 3887997704 ("" (postpone) nil nil) nil
   shostak))
 (fresh_subs?_append 0
  (fresh_subs?_append-1 nil 3887998153
   ("" (induct "Delta")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("ax" "Delta"))
      (("2" (prop)
        (("2" (induct "sigma")
          (("1" (skeep)
            (("1" (expand "fresh_subs?" 1 (1 3 4))
              (("1" (expand "append" 1)
                (("1" (rewrite "fresh_subs?_null")
                  (("1" (expand "x" 1 (1 4))
                    (("1" (lift-if)
                      (("1" (prop)
                        (("1" (expand "x" 1 2)
                          (("1" (assert)
                            (("1" (expand "x" 1)
                              (("1" (rewrite "append_null") nil nil))
                              nil))
                            nil))
                          nil)
                         ("2" (expand "x" 2) (("2" (propax) nil nil))
                          nil)
                         ("3" (expand "x" 2) (("3" (propax) nil nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil)
           ("2" (skolem 1 ("sig" "Sigma"))
            (("2" (prop)
              (("2" (skeep)
                (("2" (inst -2 "gamma" "cons(sig, Sigma)")
                  (("2" (expand "fresh_subs?" 1 (1 3 4))
                    (("2" (replaces -2)
                      (("2" (expand "x" 1 4)
                        (("2" (lift-if)
                          (("2" (assert)
                            (("2" (prop)
                              (("1"
                                (rewrite "fresh_subs?_append_context")
                                (("1"
                                  (expand "x" 1 5)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (rewrite "subs_append2")
                                      (("1"
                                        (rewrite
                                         "fresh_subs?_is_fresh3"
                                         1)
                                        (("1"
                                          (hide -3)
                                          (("1"
                                            (grind)
                                            (("1"
                                              (rewrite "append_null")
                                              (("1"
                                                (rewrite "append_null")
                                                (("1"
                                                  (rewrite
                                                   "append_null")
                                                  nil
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (rewrite "subs_append2")
                                (("2"
                                  (rewrite "fresh_subs?_is_fresh3" 2)
                                  (("2"
                                    (hide -1)
                                    (("2" (grind) nil nil))
                                    nil))
                                  nil))
                                nil)
                               ("3"
                                (hide -1)
                                (("3" (grind) nil nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fresh? def-decl "[fresh_context, bool]" freshness nil)
    (subs def-decl "term" substitution nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" term_adt
       nil)
    (subs_append2 formula-decl nil substitution nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (x const-decl "[fresh_context, bool]" freshness nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil))
   nil))
 (fresh_subs?_alpha_aux 0
  (fresh_subs?_alpha_aux-1 nil 3888004579
   ("" (measure-induct "size(t)" "t")
    (("" (skolem 1 "t")
      (("" (prop)
        (("" (hide -1)
          (("" (skolem 1 ("Del" "x" "s" "u"))
            (("" (flatten)
              ((""
                (name-replace "b" "fresh_subs?((: (x, u) :), Del)`2")
                ((""
                  (name-replace "Nab"
                   "fresh_subs?((: (x, u) :), Del)`1")
                  (("" (reveal -1)
                    (("" (reveal -2)
                      (("" (lemma "term_opt")
                        (("" (inst -1 "t")
                          (("" (prop)
                            (("1" (replace -2)
                              (("1"
                                (expand "equal?" -6)
                                (("1"
                                  (replace -6)
                                  (("1" (use "equal?_ref") nil nil))
                                  nil))
                                nil))
                              nil)
                             ("2" (expand "equal?" -6)
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (lemma "term_times_eta")
                                    (("2"
                                      (inst -1 "s")
                                      (("2"
                                        (lemma "basic_subs_ext")
                                        (("2"
                                          (inst
                                           -1
                                           "x"
                                           "p(t)"
                                           "u"
                                           "null * V(t)")
                                          (("2"
                                            (expand "ext" -1 1)
                                            (("2"
                                              (rewrite "append_null")
                                              (("2"
                                                (replace -4 :dir rl)
                                                (("2"
                                                  (replace -1)
                                                  (("2"
                                                    (lemma
                                                     "basic_subs_ext")
                                                    (("2"
                                                      (inst
                                                       -1
                                                       "x"
                                                       "p(s)"
                                                       "u"
                                                       "null * V(t)")
                                                      (("2"
                                                        (expand
                                                         "ext"
                                                         -1
                                                         1)
                                                        (("2"
                                                          (rewrite
                                                           "append_null")
                                                          (("2"
                                                            (replace
                                                             -10
                                                             :dir
                                                             rl)
                                                            (("2"
                                                              (replace
                                                               -3)
                                                              (("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (use
                                                                   "equal?_fresh_invariance")
                                                                  (("2"
                                                                    (assert)
                                                                    (("2"
                                                                      (hide
                                                                       2)
                                                                      (("2"
                                                                        (skeep)
                                                                        (("2"
                                                                          (inst
                                                                           -11
                                                                           "a")
                                                                          (("2"
                                                                            (typepred
                                                                             "a")
                                                                            (("2"
                                                                              (lemma
                                                                               "fresh_subs?_is_fresh")
                                                                              (("2"
                                                                                (inst
                                                                                 -1
                                                                                 "Del"
                                                                                 "(:(x, u):)")
                                                                                (("2"
                                                                                  (assert)
                                                                                  (("2"
                                                                                    (inst
                                                                                     -1
                                                                                     "a"
                                                                                     "V(t)")
                                                                                    (("2"
                                                                                      (assert)
                                                                                      (("2"
                                                                                        (assert)
                                                                                        (("2"
                                                                                          (expand
                                                                                           "subs"
                                                                                           -1
                                                                                           1)
                                                                                          (("2"
                                                                                            (expand
                                                                                             "subs"
                                                                                             -1
                                                                                             2)
                                                                                            (("2"
                                                                                              (replace
                                                                                               -9)
                                                                                              (("2"
                                                                                                (propax)
                                                                                                nil
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("3" (replace -1)
                              (("3"
                                (expand "equal?" -5)
                                (("3"
                                  (replace -5)
                                  (("3" (use "equal?_ref") nil nil))
                                  nil))
                                nil))
                              nil)
                             ("4" (replace -2 -6)
                              (("4"
                                (expand "equal?" -6)
                                (("4"
                                  (flatten)
                                  (("4"
                                    (lemma "term_pair_eta")
                                    (("4"
                                      (inst -1 "s")
                                      (("4"
                                        (replace -1 1 :dir rl)
                                        (("4"
                                          (replace -3 1)
                                          (("4"
                                            (expand "subs" 1)
                                            (("4"
                                              (expand "equal?" 1)
                                              (("4"
                                                (reveal -5)
                                                (("4"
                                                  (prop)
                                                  (("1"
                                                    (inst
                                                     -1
                                                     "term1(t)")
                                                    (("1"
                                                      (prop)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "term1(s)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil)
                                                   ("2"
                                                    (inst
                                                     -1
                                                     "term2(t)")
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (inst?)
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "term2(s)")
                                                          (("1"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (grind)
                                                        nil
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("5" (replace -2 -6)
                              (("5"
                                (expand "equal?" -6)
                                (("5"
                                  (flatten)
                                  (("5"
                                    (lemma "term_app_eta")
                                    (("5"
                                      (inst -1 "s")
                                      (("5"
                                        (replace -8 :dir rl)
                                        (("5"
                                          (replace -3 1)
                                          (("5"
                                            (expand "subs" 1 1)
                                            (("5"
                                              (replace -1 1 :dir rl)
                                              (("5"
                                                (expand "subs" 1 2)
                                                (("5"
                                                  (expand "equal?" 1)
                                                  (("5"
                                                    (case
                                                     "equal?(Nab)(subs((x, u), arg(t)), subs((x, u), arg(s)))")
                                                    (("1"
                                                      (assert)
                                                      (("1"
                                                        (use
                                                         "equal?_num_arg2")
                                                        (("1"
                                                          (assert)
                                                          nil
                                                          nil))
                                                        nil))
                                                      nil)
                                                     ("2"
                                                      (hide 2)
                                                      (("2"
                                                        (reveal -5)
                                                        (("2"
                                                          (inst
                                                           -1
                                                           "arg(t)")
                                                          (("2"
                                                            (prop)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "Del"
                                                               "x"
                                                               "arg(s)"
                                                               "u")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil)
                                                             ("2"
                                                              (grind)
                                                              nil
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("6" (expand "equal?" -6)
                              (("6"
                                (assert)
                                (("6"
                                  (name-replace "g" "ac_sym(t)")
                                  (("6"
                                    (flatten)
                                    (("6"
                                      (case
                                       "num_arg(g, t) = num_arg(g, s)")
                                      (("1"
                                        (hide -4 -5 -6)
                                        (("1"
                                          (lemma "term_ac_app_eta")
                                          (("1"
                                            (inst -1 "s")
                                            (("1"
                                              (replace -6 :dir rl)
                                              (("1"
                                                (replace -1 1 :dir rl)
                                                (("1"
                                                  (replace -4 1)
                                                  (("1"
                                                    (expand "subs" 1)
                                                    (("1"
                                                      (case
                                                       "equal?(Del)(t, s)")
                                                      (("1"
                                                        (lemma
                                                         "perm_args_ac")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "Nab"
                                                           "ac_app(g, subs((x, u), ac_arg(s)))"
                                                           "g"
                                                           "_")
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (assert)
                                                              (("1"
                                                                (hide
                                                                 2)
                                                                (("1"
                                                                  (expand
                                                                   "are_ac?"
                                                                   1)
                                                                  (("1"
                                                                    (name-replace
                                                                     "sig"
                                                                     "cons[[variable, term]]((x, u), null)")
                                                                    (("1"
                                                                      (case
                                                                       "subs((x, u), ac_arg(t)) = subs(sig)(ac_arg(t))")
                                                                      (("1"
                                                                        (replace
                                                                         -1)
                                                                        (("1"
                                                                          (case
                                                                           "subs((x, u), ac_arg(s)) = subs(sig)(ac_arg(s))")
                                                                          (("1"
                                                                            (replace
                                                                             -1)
                                                                            (("1"
                                                                              (hide
                                                                               -1
                                                                               -2
                                                                               -3)
                                                                              (("1"
                                                                                (lemma
                                                                                 "subs_ac")
                                                                                (("1"
                                                                                  (inst?)
                                                                                  (("1"
                                                                                    (replace
                                                                                     -1
                                                                                     :dir
                                                                                     rl)
                                                                                    (("1"
                                                                                      (hide
                                                                                       -1)
                                                                                      (("1"
                                                                                        (lemma
                                                                                         "subs_ac")
                                                                                        (("1"
                                                                                          (inst
                                                                                           -1
                                                                                           "ac_arg(s)"
                                                                                           "g"
                                                                                           "sig")
                                                                                          (("1"
                                                                                            (replace
                                                                                             -1
                                                                                             :dir
                                                                                             rl
                                                                                             :hide?
                                                                                             t)
                                                                                            (("1"
                                                                                              (replace
                                                                                               -2)
                                                                                              (("1"
                                                                                                (replace
                                                                                                 -5
                                                                                                 :dir
                                                                                                 rl)
                                                                                                (("1"
                                                                                                  (case
                                                                                                   "num_arg(g, t) > 1")
                                                                                                  (("1"
                                                                                                    (lemma
                                                                                                     "subs_perm_get_args_ge1")
                                                                                                    (("1"
                                                                                                      (skeep)
                                                                                                      (("1"
                                                                                                        (hide
                                                                                                         -10
                                                                                                         -11
                                                                                                         -12
                                                                                                         -13)
                                                                                                        (("1"
                                                                                                          (inst?)
                                                                                                          (("1"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "Nab"
                                                                                                             "i")
                                                                                                            (("1"
                                                                                                              (assert)
                                                                                                              (("1"
                                                                                                                (case
                                                                                                                 "perm?(Nab)(append(get_args(g)(subs(sig)(select(g, t)(i))), get_args(g)(subs(sig)(delete(g, t)(i)))), get_args(g)(subs(sig)(s)))")
                                                                                                                (("1"
                                                                                                                  (lemma
                                                                                                                   "perm?_trans")
                                                                                                                  (("1"
                                                                                                                    (inst
                                                                                                                     -1
                                                                                                                     "Nab"
                                                                                                                     "get_args(g)(subs(sig)(t))"
                                                                                                                     "_"
                                                                                                                     "_")
                                                                                                                    (("1"
                                                                                                                      (inst?
                                                                                                                       -1)
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        nil
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil)
                                                                                                                 ("2"
                                                                                                                  (hide
                                                                                                                   -1
                                                                                                                   2)
                                                                                                                  (("2"
                                                                                                                    (lemma
                                                                                                                     "subs_perm_get_args_ge1")
                                                                                                                    (("2"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "Nab"
                                                                                                                       "g"
                                                                                                                       "j"
                                                                                                                       "sig"
                                                                                                                       "s")
                                                                                                                      (("2"
                                                                                                                        (assert)
                                                                                                                        (("2"
                                                                                                                          (lemma
                                                                                                                           "perm?_sym")
                                                                                                                          (("2"
                                                                                                                            (inst
                                                                                                                             -1
                                                                                                                             "Nab"
                                                                                                                             "get_args(g)(subs(sig)(s))"
                                                                                                                             "append(get_args(g)(subs(sig)(select(g, s)(j))), get_args(g)(subs(sig)(delete(g, s)(j))))")
                                                                                                                            (("2"
                                                                                                                              (assert)
                                                                                                                              (("2"
                                                                                                                                (hide
                                                                                                                                 -2)
                                                                                                                                (("2"
                                                                                                                                  (lemma
                                                                                                                                   "perm?_trans")
                                                                                                                                  (("2"
                                                                                                                                    (inst
                                                                                                                                     -1
                                                                                                                                     "Nab"
                                                                                                                                     "append(get_args(g)(subs(sig)(select(g, t)(i))), get_args(g)(subs(sig)(delete(g, t)(i))))"
                                                                                                                                     "append(get_args(g)(subs(sig)(select(g, s)(j))), get_args(g)(subs(sig)(delete(g, s)(j))))"
                                                                                                                                     "get_args(g)(subs(sig)(s))")
                                                                                                                                    (("2"
                                                                                                                                      (assert)
                                                                                                                                      (("2"
                                                                                                                                        (hide
                                                                                                                                         -1
                                                                                                                                         2)
                                                                                                                                        (("2"
                                                                                                                                          (lemma
                                                                                                                                           "perm?_append")
                                                                                                                                          (("2"
                                                                                                                                            (inst?)
                                                                                                                                            (("2"
                                                                                                                                              (assert)
                                                                                                                                              (("2"
                                                                                                                                                (hide
                                                                                                                                                 2)
                                                                                                                                                (("2"
                                                                                                                                                  (prop)
                                                                                                                                                  (("1"
                                                                                                                                                    (rewrite
                                                                                                                                                     "ac_perm_args2"
                                                                                                                                                     1)
                                                                                                                                                    (("1"
                                                                                                                                                      (hide
                                                                                                                                                       2)
                                                                                                                                                      (("1"
                                                                                                                                                        (reveal
                                                                                                                                                         -18
                                                                                                                                                         -22
                                                                                                                                                         -25
                                                                                                                                                         -26
                                                                                                                                                         -27)
                                                                                                                                                        (("1"
                                                                                                                                                          (inst
                                                                                                                                                           -5
                                                                                                                                                           "select(g, t)(i)")
                                                                                                                                                          (("1"
                                                                                                                                                            (prop)
                                                                                                                                                            (("1"
                                                                                                                                                              (inst
                                                                                                                                                               -1
                                                                                                                                                               "Del"
                                                                                                                                                               "x"
                                                                                                                                                               "select(g, s)(j)"
                                                                                                                                                               "u")
                                                                                                                                                              (("1"
                                                                                                                                                                (assert)
                                                                                                                                                                (("1"
                                                                                                                                                                  (replace
                                                                                                                                                                   -4)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (expand
                                                                                                                                                                     "sig"
                                                                                                                                                                     1)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "subs"
                                                                                                                                                                       1
                                                                                                                                                                       1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "subs"
                                                                                                                                                                         1
                                                                                                                                                                         2)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "subs"
                                                                                                                                                                           1
                                                                                                                                                                           2)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (expand
                                                                                                                                                                             "subs"
                                                                                                                                                                             1
                                                                                                                                                                             3)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (propax)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (use
                                                                                                                                                               "ac_select_size")
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                (("2"
                                                                                                                                                                  (expand
                                                                                                                                                                   "is_ac_sym?"
                                                                                                                                                                   1)
                                                                                                                                                                  (("2"
                                                                                                                                                                    (expand
                                                                                                                                                                     "g"
                                                                                                                                                                     1)
                                                                                                                                                                    (("2"
                                                                                                                                                                      (propax)
                                                                                                                                                                      nil
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil)
                                                                                                                                                   ("2"
                                                                                                                                                    (rewrite
                                                                                                                                                     "ac_perm_args2")
                                                                                                                                                    (("2"
                                                                                                                                                      (hide
                                                                                                                                                       2)
                                                                                                                                                      (("2"
                                                                                                                                                        (reveal
                                                                                                                                                         -18
                                                                                                                                                         -22
                                                                                                                                                         -25
                                                                                                                                                         -26
                                                                                                                                                         -27)
                                                                                                                                                        (("2"
                                                                                                                                                          (inst
                                                                                                                                                           -5
                                                                                                                                                           "delete(g, t)(i)")
                                                                                                                                                          (("2"
                                                                                                                                                            (prop)
                                                                                                                                                            (("1"
                                                                                                                                                              (inst?)
                                                                                                                                                              (("1"
                                                                                                                                                                (inst
                                                                                                                                                                 -1
                                                                                                                                                                 "delete(g, s)(j)")
                                                                                                                                                                (("1"
                                                                                                                                                                  (assert)
                                                                                                                                                                  (("1"
                                                                                                                                                                    (replace
                                                                                                                                                                     -4)
                                                                                                                                                                    (("1"
                                                                                                                                                                      (expand
                                                                                                                                                                       "sig"
                                                                                                                                                                       1)
                                                                                                                                                                      (("1"
                                                                                                                                                                        (expand
                                                                                                                                                                         "subs"
                                                                                                                                                                         1)
                                                                                                                                                                        (("1"
                                                                                                                                                                          (expand
                                                                                                                                                                           "subs"
                                                                                                                                                                           1
                                                                                                                                                                           2)
                                                                                                                                                                          (("1"
                                                                                                                                                                            (expand
                                                                                                                                                                             "subs"
                                                                                                                                                                             1
                                                                                                                                                                             3)
                                                                                                                                                                            (("1"
                                                                                                                                                                              (propax)
                                                                                                                                                                              nil
                                                                                                                                                                              nil))
                                                                                                                                                                            nil))
                                                                                                                                                                          nil))
                                                                                                                                                                        nil))
                                                                                                                                                                      nil))
                                                                                                                                                                    nil))
                                                                                                                                                                  nil))
                                                                                                                                                                nil))
                                                                                                                                                              nil)
                                                                                                                                                             ("2"
                                                                                                                                                              (use
                                                                                                                                                               "num_arg_delete_size")
                                                                                                                                                              (("2"
                                                                                                                                                                (assert)
                                                                                                                                                                nil
                                                                                                                                                                nil))
                                                                                                                                                              nil))
                                                                                                                                                            nil))
                                                                                                                                                          nil))
                                                                                                                                                        nil))
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil)
                                                                                                   ("2"
                                                                                                    (lemma
                                                                                                     "subs_get_args1")
                                                                                                    (("2"
                                                                                                      (inst?)
                                                                                                      (("2"
                                                                                                        (skeep)
                                                                                                        (("2"
                                                                                                          (hide
                                                                                                           -9
                                                                                                           -10
                                                                                                           -11
                                                                                                           -12)
                                                                                                          (("2"
                                                                                                            (inst
                                                                                                             -1
                                                                                                             "i")
                                                                                                            (("2"
                                                                                                              (case
                                                                                                               "num_arg(g, t) = 1")
                                                                                                              (("1"
                                                                                                                (assert)
                                                                                                                (("1"
                                                                                                                  (replace
                                                                                                                   -2)
                                                                                                                  (("1"
                                                                                                                    (lemma
                                                                                                                     "subs_get_args1")
                                                                                                                    (("1"
                                                                                                                      (inst
                                                                                                                       -1
                                                                                                                       "g"
                                                                                                                       "j"
                                                                                                                       "sig"
                                                                                                                       "s")
                                                                                                                      (("1"
                                                                                                                        (assert)
                                                                                                                        (("1"
                                                                                                                          (replace
                                                                                                                           -1
                                                                                                                           2)
                                                                                                                          (("1"
                                                                                                                            (rewrite
                                                                                                                             "ac_perm_args2")
                                                                                                                            (("1"
                                                                                                                              (hide
                                                                                                                               3
                                                                                                                               -1
                                                                                                                               -2
                                                                                                                               --3)
                                                                                                                              (("1"
                                                                                                                                (reveal
                                                                                                                                 -14
                                                                                                                                 -18
                                                                                                                                 -21
                                                                                                                                 -22
                                                                                                                                 -23)
                                                                                                                                (("1"
                                                                                                                                  (inst
                                                                                                                                   -5
                                                                                                                                   "select(g, t)(i)")
                                                                                                                                  (("1"
                                                                                                                                    (prop)
                                                                                                                                    (("1"
                                                                                                                                      (inst?)
                                                                                                                                      (("1"
                                                                                                                                        (inst
                                                                                                                                         -1
                                                                                                                                         "select(g, s)(j)")
                                                                                                                                        (("1"
                                                                                                                                          (assert)
                                                                                                                                          (("1"
                                                                                                                                            (replace
                                                                                                                                             -4)
                                                                                                                                            (("1"
                                                                                                                                              (expand
                                                                                                                                               "sig"
                                                                                                                                               1)
                                                                                                                                              (("1"
                                                                                                                                                (expand
                                                                                                                                                 "subs"
                                                                                                                                                 1)
                                                                                                                                                (("1"
                                                                                                                                                  (expand
                                                                                                                                                   "subs"
                                                                                                                                                   1
                                                                                                                                                   2)
                                                                                                                                                  (("1"
                                                                                                                                                    (expand
                                                                                                                                                     "subs"
                                                                                                                                                     1
                                                                                                                                                     3)
                                                                                                                                                    (("1"
                                                                                                                                                      (propax)
                                                                                                                                                      nil
                                                                                                                                                      nil))
                                                                                                                                                    nil))
                                                                                                                                                  nil))
                                                                                                                                                nil))
                                                                                                                                              nil))
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil)
                                                                                                                                     ("2"
                                                                                                                                      (use
                                                                                                                                       "ac_select_size")
                                                                                                                                      (("2"
                                                                                                                                        (assert)
                                                                                                                                        (("2"
                                                                                                                                          (expand
                                                                                                                                           ("is_ac_sym?"
                                                                                                                                            "g"))
                                                                                                                                          (("2"
                                                                                                                                            (propax)
                                                                                                                                            nil
                                                                                                                                            nil))
                                                                                                                                          nil))
                                                                                                                                        nil))
                                                                                                                                      nil))
                                                                                                                                    nil))
                                                                                                                                  nil))
                                                                                                                                nil))
                                                                                                                              nil))
                                                                                                                            nil))
                                                                                                                          nil))
                                                                                                                        nil))
                                                                                                                      nil))
                                                                                                                    nil))
                                                                                                                  nil))
                                                                                                                nil)
                                                                                                               ("2"
                                                                                                                (use
                                                                                                                 "num_arg_ge1")
                                                                                                                (("2"
                                                                                                                  (assert)
                                                                                                                  nil
                                                                                                                  nil))
                                                                                                                nil))
                                                                                                              nil))
                                                                                                            nil))
                                                                                                          nil))
                                                                                                        nil))
                                                                                                      nil))
                                                                                                    nil))
                                                                                                  nil))
                                                                                                nil))
                                                                                              nil))
                                                                                            nil))
                                                                                          nil))
                                                                                        nil))
                                                                                      nil))
                                                                                    nil))
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil)
                                                                           ("2"
                                                                            (expand
                                                                             "sig"
                                                                             1)
                                                                            (("2"
                                                                              (expand
                                                                               "subs"
                                                                               1
                                                                               2)
                                                                              (("2"
                                                                                (expand
                                                                                 "subs"
                                                                                 1
                                                                                 3)
                                                                                (("2"
                                                                                  (propax)
                                                                                  nil
                                                                                  nil))
                                                                                nil))
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil)
                                                                       ("2"
                                                                        (expand
                                                                         "sig"
                                                                         1)
                                                                        (("2"
                                                                          (expand
                                                                           "subs"
                                                                           1
                                                                           2)
                                                                          (("2"
                                                                            (expand
                                                                             "subs"
                                                                             1
                                                                             3)
                                                                            (("2"
                                                                              (propax)
                                                                              nil
                                                                              nil))
                                                                            nil))
                                                                          nil))
                                                                        nil))
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (hide 2)
                                                        (("2"
                                                          (expand
                                                           "equal?"
                                                           1)
                                                          (("2"
                                                            (reveal -3)
                                                            (("2"
                                                              (assert)
                                                              (("2"
                                                                (replace
                                                                 -1)
                                                                (("2"
                                                                  (propax)
                                                                  nil
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil)
                                       ("2"
                                        (lemma "equal?_num_arg")
                                        (("2"
                                          (inst?)
                                          (("2"
                                            (inst -1 "Del")
                                            (("2"
                                              (assert)
                                              (("2"
                                                (expand "equal?" 1)
                                                (("2"
                                                  (expand "g")
                                                  (("2"
                                                    (assert)
                                                    nil
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil)
                             ("7" (expand "equal?" -6)
                              (("7"
                                (assert)
                                (("7"
                                  (flatten)
                                  (("7"
                                    (split -7)
                                    (("1"
                                      (flatten)
                                      (("1"
                                        (lemma "term_abs_eta")
                                        (("1"
                                          (inst -1 "s")
                                          (("1"
                                            (replace -2 :dir rl)
                                            (("1"
                                              (replace -5 1)
                                              (("1"
                                                (replace -1 1 :dir rl)
                                                (("1"
                                                  (expand "subs" 1)
                                                  (("1"
                                                    (expand "equal?" 1)
                                                    (("1"
                                                      (reveal -5)
                                                      (("1"
                                                        (inst
                                                         -1
                                                         "body(t)")
                                                        (("1"
                                                          (prop)
                                                          (("1"
                                                            (inst?)
                                                            (("1"
                                                              (inst
                                                               -1
                                                               "body(s)")
                                                              (("1"
                                                                (assert)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil)
                                                           ("2"
                                                            (grind)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (flatten)
                                      (("2"
                                        (lemma "term_abs_eta")
                                        (("2"
                                          (inst -1 "s")
                                          (("2"
                                            (replace -1 2 :dir rl)
                                            (("2"
                                              (replace -5 2)
                                              (("2"
                                                (expand "subs" 2)
                                                (("2"
                                                  (expand "equal?" 2)
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (prop)
                                                      (("1"
                                                        (lemma
                                                         "fresh_subs?_is_fresh2")
                                                        (("1"
                                                          (inst
                                                           -1
                                                           "Del"
                                                           "abstr(t)"
                                                           "cons((x, u), null)"
                                                           "body(s)")
                                                          (("1"
                                                            (assert)
                                                            (("1"
                                                              (replace
                                                               -8)
                                                              (("1"
                                                                (expand
                                                                 "subs"
                                                                 -1)
                                                                (("1"
                                                                  (expand
                                                                   "subs"
                                                                   -1
                                                                   2)
                                                                  (("1"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil)
                                                       ("2"
                                                        (rewrite
                                                         "basic_subs_ext"
                                                         1
                                                         :dir
                                                         rl)
                                                        (("2"
                                                          (reveal -5)
                                                          (("2"
                                                            (inst
                                                             -1
                                                             "body(t)")
                                                            (("2"
                                                              (prop)
                                                              (("1"
                                                                (inst?)
                                                                (("1"
                                                                  (inst
                                                                   -1
                                                                   "ext(cons((abstr(t), abstr(s)), null))(body(s))")
                                                                  (("1"
                                                                    (assert)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil)
                                                               ("2"
                                                                (grind)
                                                                nil
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((abstr adt-accessor-decl "[(abs?) -> atom]" term_adt nil)
    (abs? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (body adt-accessor-decl "[(abs?) -> term]" term_adt nil)
    (term_abs_eta formula-decl nil term_adt nil)
    (ac_sym adt-accessor-decl "[(ac_app?) -> ac_symbol]" term_adt nil)
    (ac_app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (num_arg def-decl "nat" term_properties nil)
    (term_ac_app_eta formula-decl nil term_adt nil)
    (ac_arg adt-accessor-decl "[(ac_app?) -> term]" term_adt nil)
    (ac_app adt-constructor-decl "[[ac_symbol, term] -> (ac_app?)]"
     term_adt nil)
    (are_ac? const-decl "bool" term_properties nil)
    (perm?_sym formula-decl nil equality nil)
    (perm?_append formula-decl nil equality nil)
    (ac_select_size formula-decl nil term_properties nil)
    (is_ac_sym? const-decl "bool" term_properties nil)
    (ac_perm_args2 formula-decl nil equality nil)
    (num_arg_delete_size formula-decl nil term_properties nil)
    (perm?_trans formula-decl nil equality nil)
    (delete def-decl "term" term_properties nil)
    (select def-decl "term" term_properties nil)
    (get_args const-decl "args" term_properties nil)
    (perm? def-decl "bool" equality nil)
    (args type-eq-decl nil term_properties nil)
    (subs_perm_get_args_ge1 formula-decl nil substitution nil)
    (num_arg_ge1 formula-decl nil term_properties nil)
    (subs_get_args1 formula-decl nil substitution nil)
    (subs_ac formula-decl nil substitution nil)
    (perm_args_ac formula-decl nil equality nil)
    (equal?_num_arg formula-decl nil equality nil)
    (app? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (equal?_num_arg2 formula-decl nil equality nil)
    (arg adt-accessor-decl "[(app?) -> term]" term_adt nil)
    (term_app_eta formula-decl nil term_adt nil)
    (pair? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term1 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term2 adt-accessor-decl "[(pair?) -> term]" term_adt nil)
    (term_pair_eta formula-decl nil term_adt nil)
    (unit adt-constructor-decl "(unit?)" term_adt nil)
    (unit? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (V adt-accessor-decl "[(var?) -> variable]" term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" term_adt
       nil)
    (p adt-accessor-decl "[(var?) -> perm]" term_adt nil)
    (equal?_fresh_invariance formula-decl nil equality nil)
    (ds const-decl "set[atom]" atoms nil)
    (subs def-decl "term" substitution nil)
    (ext def-decl "term" term_properties nil)
    (basic_subs_ext formula-decl nil substitution nil)
    (term_times_eta formula-decl nil term_adt nil)
    (equal?_ref formula-decl nil equality nil)
    (a adt-accessor-decl "[(atom?) -> atom]" term_adt nil)
    (at adt-constructor-decl "[atom -> (atom?)]" term_adt nil)
    (atom? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (term_opt formula-decl nil term_properties nil)
    (sub type-eq-decl nil substitution nil)
    (subs def-decl "term" substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (equal? def-decl "bool" equality nil)
    (fresh_context type-eq-decl nil freshness nil)
    (size def-decl "nat" term_properties nil)
    (variable type-eq-decl nil term_properties nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (perm type-eq-decl nil atoms nil)
    (atom type-eq-decl nil atoms nil))
   nil))
 (fresh_subs?_alpha 0
  (fresh_subs?_alpha-1 nil 3888066089
   ("" (induct "sigma")
    (("1" (grind) nil nil)
     ("2" (grind)
      (("2" (rewrite "fresh_subs?_null") (("2" (assert) nil nil)) nil))
      nil)
     ("3" (skolem 1 (head tail))
      (("3" (prop)
        (("3" (skeep)
          (("3" (expand "subs" 1)
            (("3"
              (case "cons(head,tail) = append(cons(head,null),tail)")
              (("1" (replaces -1)
                (("1" (rewrite "fresh_subs?_append")
                  (("1" (expand "x" -2)
                    (("1" (prop)
                      (("1" (expand "x")
                        (("1" (assert)
                          (("1" (inst -3 "Delta" "s" "t")
                            (("1" (assert)
                              (("1"
                                (lemma
                                 "fresh_subs?_alpha_aux"
                                 ("X"
                                  "head`1"
                                  "u"
                                  "head`2"
                                  "t"
                                  "subs(tail)(t)"
                                  "s"
                                  "subs(tail)(s)"
                                  "Delta"
                                  "fresh_subs?(tail, Delta)`1"))
                                (("1"
                                  (rewrite "append_null")
                                  (("1"
                                    (case
                                     "(: (head`1, head`2) :) = cons(head, null)")
                                    (("1"
                                      (replaces -1)
                                      (("1"
                                        (assert)
                                        (("1"
                                          (case
                                           "head = (head`1, head`2)")
                                          (("1"
                                            (replace -1 :dir rl)
                                            (("1" (propax) nil nil))
                                            nil)
                                           ("2"
                                            (decompose-equality 1)
                                            nil
                                            nil))
                                          nil))
                                        nil))
                                      nil)
                                     ("2"
                                      (decompose-equality 1)
                                      nil
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil)
               ("2" (expand "append" 1)
                (("2" (expand "append" 1) (("2" (propax) nil nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((x const-decl "[fresh_context, bool]" freshness nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil) (perm type-eq-decl nil atoms nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (every adt-def-decl "boolean" term_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (subs def-decl "term" substitution nil)
    (equal? def-decl "bool" equality nil)
    (fresh_context type-eq-decl nil freshness nil)
    (sub type-eq-decl nil substitution nil))
   nil))
 (fresh_subs?_complete 0
  (fresh_subs?_complete-1 nil 3888066439
   ("" (induct "Nabla")
    (("1" (grind) nil nil) ("2" (grind) nil nil)
     ("3" (skeep*)
      (("3" (expand "fresh_subs?" 1)
        (("3" (expand "fresh_subs" -2)
          (("3" (expand "x")
            (("3" (flatten)
              (("3" (lift-if)
                (("3"
                  (lemma "fresh?_complete"
                   ("Delta" "Delta" "a" "cons1_var`1" "t"
                    "subs(sigma)((: :) * cons1_var`2)"))
                  (("3" (inst -2 "Delta" "sigma")
                    (("3" (assert)
                      (("3" (assert)
                        (("3" (flatten)
                          (("3" (assert)
                            (("3" (skeep)
                              (("3"
                                (rewrite "member_append")
                                (("3"
                                  (split)
                                  (("1"
                                    (inst -3 "a" "X")
                                    (("1" (assert) nil nil))
                                    nil)
                                   ("2"
                                    (inst -5 "a" "X")
                                    (("2" (assert) nil nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((* adt-constructor-decl "[[perm, variable] -> (var?)]" term_adt
       nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs def-decl "term" substitution nil)
    (fresh?_complete formula-decl nil freshness nil)
    (member_append formula-decl nil list_theory nil)
    (fresh? def-decl "[fresh_context, bool]" freshness nil)
    (x const-decl "[fresh_context, bool]" freshness nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil))
   nil))
 (fresh_subs?_is_fresh_subs 0
  (fresh_subs?_is_fresh_subs-1 nil 3888066618
   ("" (skeep)
    (("" (assert)
      (("" (flatten)
        (("" (rewrite "fresh_subs_character")
          (("" (skeep)
            ((""
              (lemma "fresh_subs?_is_fresh2"
               ("sigma" "sigma" "Delta" "Nabla" "a" "ax`1" "t"
                "(: :) * ax`2"))
              (("" (assert)
                (("" (assert)
                  (("" (expand "fresh" 1)
                    (("" (expand* "reverse" "act")
                      (("" (case "ax = (ax`1, ax`2)")
                        (("1" (replace -1 -3) (("1" (propax) nil nil))
                          nil)
                         ("2" (decompose-equality 1) nil nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (fresh_context type-eq-decl nil freshness nil)
    (perm type-eq-decl nil atoms nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (term type-decl nil term_adt nil)
    (every adt-def-decl "boolean" term_adt nil)
    (basic_sub type-eq-decl nil substitution nil)
    (sub type-eq-decl nil substitution nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" term_adt
       nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (act def-decl "atom" atoms nil)
    (fresh def-decl "bool" freshness nil))
   nil))
 (fresh_subs_o_fresh_subs? 0
  (fresh_subs_o_fresh_subs?-3 nil 3888068631
   ("" (induct "Nabla")
    (("1" (grind) nil nil)
     ("2" (skolem 1 ("ax" "Nabla"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "fresh_subs?" 1)
            (("2" (expand "x")
              (("2" (lift-if)
                (("2" (split)
                  (("1" (flatten)
                    (("1" (expand "fresh_subs" 1 1)
                      (("1" (rewrite "fresh_subs_append_context")
                        (("1" (inst -3 "Delta" "gamma" "sigma")
                          (("1" (iff 1)
                            (("1" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -2 -4 -5)
                                      (("1"
                                        (rewrite "subs_append2")
                                        (("1"
                                          (lemma
                                           "fresh?_complete"
                                           ("Delta"
                                            "Delta"
                                            "a"
                                            "ax`1"
                                            "t"
                                            "subs(sigma)(subs(gamma)((: :) * ax`2))"))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (lemma
                                                   "fresh_subs?_is_fresh3"
                                                   ("a"
                                                    "ax`1"
                                                    "sigma"
                                                    "sigma"
                                                    "t"
                                                    "subs(gamma)((: :) * ax`2)"))
                                                  (("1"
                                                    (expand "x")
                                                    (("1"
                                                      (rewrite
                                                       "append_null")
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (replaces
                                                               -2)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "fresh_subs?_is_fresh_subs"
                                                                   ("sigma"
                                                                    "sigma"
                                                                    "Nabla"
                                                                    "fresh?(ax`1, subs(gamma)((: :) * ax`2))`1"))
                                                                  (("1"
                                                                    (lemma
                                                                     "fresh_subs_weakening"
                                                                     ("Delta"
                                                                      "fresh?(ax`1, subs(gamma)((: :) * ax`2))`1"
                                                                      "Nabla2"
                                                                      "Delta"
                                                                      "sigma"
                                                                      "sigma"
                                                                      "Nabla1"
                                                                      "fresh_subs?(sigma, fresh?(ax`1, subs(gamma)((: :) * ax`2))`1)`1"))
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil)
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (hide -2 -4 -5)
                                      (("2"
                                        (rewrite "subs_append2")
                                        (("2"
                                          (lemma
                                           "fresh_subs?_complete"
                                           ("Delta"
                                            "Delta"
                                            "sigma"
                                            "sigma"
                                            "Nabla"
                                            "fresh?(ax`1, subs(gamma)((: :) * ax`2))`1"))
                                          (("2"
                                            (assert)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (lemma
                                                 "fresh_subs?_is_fresh3"
                                                 ("sigma"
                                                  "sigma"
                                                  "a"
                                                  "ax`1"
                                                  "t"
                                                  "subs(gamma)((: :) * ax`2)"))
                                                (("2"
                                                  (expand "x")
                                                  (("2"
                                                    (rewrite
                                                     "append_null")
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "fresh?_is_fresh"
                                                           ("Delta"
                                                            "fresh?(ax`1, subs(sigma)(subs(gamma)((: :) * ax`2)))`1"
                                                            "a"
                                                            "ax`1"
                                                            "t"
                                                            "subs(sigma)(subs(gamma)((: :) * ax`2))"))
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "fresh_weakening"
                                                               ("Nabla"
                                                                "Delta"
                                                                "Delta"
                                                                "fresh?(ax`1, subs(sigma)(subs(gamma)((: :) * ax`2)))`1"
                                                                "a"
                                                                "ax`1"
                                                                "t"
                                                                "subs(sigma)(subs(gamma)((: :) * ax`2))"))
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil
                                                                      nil))
                                                                    nil)
                                                                   ("2"
                                                                    (propax)
                                                                    nil
                                                                    nil))
                                                                  nil))
                                                                nil))
                                                              nil))
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil)
                   ("2" (flatten)
                    (("2" (expand "fresh_subs" 2)
                      (("2" (flatten)
                        (("2" (rewrite "subs_append2")
                          (("2"
                            (lemma "fresh?_complete"
                             ("Delta" "Delta" "a" "ax`1" "t"
                              "subs(sigma)(subs(gamma)((: :) * ax`2))"))
                            (("2" (assert)
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (lemma
                                     "subs_fresh"
                                     ("a"
                                      "ax`1"
                                      "sigma"
                                      "sigma"
                                      "t"
                                      "subs(gamma)((: :) * ax`2)"))
                                    (("2"
                                      (assert)
                                      (("2"
                                        (rewrite
                                         "fresh_subs?_character")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (rewrite
                                             "fresh_subs_character"
                                             -6)
                                            (("2"
                                              (inst -6 "(a, X)")
                                              (("2"
                                                (rewrite
                                                 "subs_append2")
                                                (("2"
                                                  (lemma
                                                   "fresh?_complete"
                                                   ("Delta"
                                                    "Delta"
                                                    "a"
                                                    "a"
                                                    "t"
                                                    "subs(sigma)(subs(gamma)((: :) * X))"))
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (lemma
                                                           "subs_fresh"
                                                           ("a"
                                                            "a"
                                                            "sigma"
                                                            "sigma"
                                                            "t"
                                                            "subs(gamma)((: :) * X)"))
                                                          (("2"
                                                            (assert)
                                                            nil
                                                            nil))
                                                          nil))
                                                        nil))
                                                      nil))
                                                    nil))
                                                  nil))
                                                nil))
                                              nil))
                                            nil))
                                          nil))
                                        nil))
                                      nil))
                                    nil))
                                  nil))
                                nil))
                              nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((x const-decl "[fresh_context, bool]" freshness nil)
    (fresh?_complete formula-decl nil freshness nil)
    (subs_append2 formula-decl nil substitution nil)
    (fresh?_is_fresh formula-decl nil freshness nil)
    (fresh_weakening formula-decl nil freshness nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" term_adt
       nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (subs def-decl "term" substitution nil)
    (fresh? def-decl "[fresh_context, bool]" freshness nil)
    (subs_fresh formula-decl nil substitution nil)
    (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil))
   nil)
  (fresh_subs_o_fresh_subs?-2 nil 3888066945
   ("" (induct "Nabla")
    (("1" (grind) nil)
     ("2" (skolem 1 ("ax" "Nabla"))
      (("2" (prop)
        (("2" (skeep)
          (("2" (expand "fresh_subs?" 1)
            (("2" (expand "x")
              (("2" (lift-if)
                (("2" (split)
                  (("1" (flatten)
                    (("1" (expand "fresh_subs" 1 1)
                      (("1" (rewrite "fresh_subs_append_context")
                        (("1" (inst -3 "Delta" "gamma" "sigma")
                          (("1" (iff 1)
                            (("1" (split)
                              (("1"
                                (flatten)
                                (("1"
                                  (assert)
                                  (("1"
                                    (assert)
                                    (("1"
                                      (hide -2 -4 -5)
                                      (("1"
                                        (rewrite "Subs_append")
                                        (("1"
                                          (lemma
                                           "fresh?_complete"
                                           ("Delta"
                                            "Delta"
                                            "a"
                                            "ax`1"
                                            "t"
                                            "Subs(sigma)(Subs(gamma)((: :) * ax`2))"))
                                          (("1"
                                            (assert)
                                            (("1"
                                              (assert)
                                              (("1"
                                                (flatten)
                                                (("1"
                                                  (lemma
                                                   "fresh_subs?_is_fresh3"
                                                   ("a"
                                                    "ax`1"
                                                    "sigma"
                                                    "sigma"
                                                    "t"
                                                    "Subs(gamma)((: :) * ax`2)"))
                                                  (("1"
                                                    (expand "x")
                                                    (("1"
                                                      (rewrite
                                                       "append_null")
                                                      (("1"
                                                        (lift-if)
                                                        (("1"
                                                          (assert)
                                                          (("1"
                                                            (prop)
                                                            (("1"
                                                              (replaces
                                                               -2)
                                                              (("1"
                                                                (assert)
                                                                (("1"
                                                                  (lemma
                                                                   "fresh_subs?_is_fresh_subs"
                                                                   ("sigma"
                                                                    "sigma"
                                                                    "Nabla"
                                                                    "fresh?(ax`1, Subs(gamma)((: :) * ax`2))`1"))
                                                                  (("1"
                                                                    (lemma
                                                                     "fresh_subs_weakening"
                                                                     ("Delta"
                                                                      "fresh?(ax`1, Subs(gamma)((: :) * ax`2))`1"
                                                                      "Nabla2"
                                                                      "Delta"
                                                                      "sigma"
                                                                      "sigma"
                                                                      "Nabla1"
                                                                      "fresh_subs?(sigma, fresh?(ax`1, Subs(gamma)((: :) * ax`2))`1)`1"))
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))))))))))))))))))))))))))))))))))))))
                               ("2"
                                (flatten)
                                (("2"
                                  (assert)
                                  (("2"
                                    (assert)
                                    (("2"
                                      (hide -2 -4 -5)
                                      (("2"
                                        (rewrite "Subs_append")
                                        (("2"
                                          (lemma
                                           "fresh_subs?_complete"
                                           ("Delta"
                                            "Delta"
                                            "sigma"
                                            "sigma"
                                            "Nabla"
                                            "fresh?(ax`1, Subs(gamma)((: :) * ax`2))`1"))
                                          (("2"
                                            (assert)
                                            (("2"
                                              (flatten)
                                              (("2"
                                                (lemma
                                                 "fresh_subs?_is_fresh3"
                                                 ("sigma"
                                                  "sigma"
                                                  "a"
                                                  "ax`1"
                                                  "t"
                                                  "Subs(gamma)((: :) * ax`2)"))
                                                (("2"
                                                  (expand "x")
                                                  (("2"
                                                    (rewrite
                                                     "append_null")
                                                    (("2"
                                                      (lift-if)
                                                      (("2"
                                                        (assert)
                                                        (("2"
                                                          (lemma
                                                           "fresh?_is_fresh"
                                                           ("Delta"
                                                            "fresh?(ax`1, Subs(sigma)(Subs(gamma)((: :) * ax`2)))`1"
                                                            "a"
                                                            "ax`1"
                                                            "t"
                                                            "Subs(sigma)(Subs(gamma)((: :) * ax`2))"))
                                                          (("2"
                                                            (assert)
                                                            (("2"
                                                              (lemma
                                                               "fresh_weakening"
                                                               ("Nabla"
                                                                "Delta"
                                                                "Delta"
                                                                "fresh?(ax`1, Subs(sigma)(Subs(gamma)((: :) * ax`2)))`1"
                                                                "a"
                                                                "ax`1"
                                                                "t"
                                                                "Subs(sigma)(Subs(gamma)((: :) * ax`2))"))
                                                              (("2"
                                                                (assert)
                                                                (("2"
                                                                  (split)
                                                                  (("1"
                                                                    (replace
                                                                     -2
                                                                     1)
                                                                    (("1"
                                                                      (assert)
                                                                      nil)))
                                                                   ("2"
                                                                    (propax)
                                                                    nil)))))))))))))))))))))))))))))))))))))))))))))))))
                   ("2" (flatten)
                    (("2" (expand "fresh_subs" 2)
                      (("2" (flatten)
                        (("2" (rewrite "Subs_append")
                          (("2"
                            (lemma "fresh?_complete"
                             ("Delta" "Delta" "a" "ax`1" "t"
                              "Subs(sigma)(Subs(gamma)((: :) * ax`2))"))
                            (("2" (assert)
                              (("2"
                                (assert)
                                (("2"
                                  (flatten)
                                  (("2"
                                    (lemma
                                     "Subs_fresh"
                                     ("a"
                                      "ax`1"
                                      "sigma"
                                      "sigma"
                                      "t"
                                      "Subs(gamma)((: :) * ax`2)"))
                                    (("2"
                                      (assert)
                                      (("2"
                                        (rewrite
                                         "fresh_subs?_character")
                                        (("2"
                                          (skeep)
                                          (("2"
                                            (rewrite
                                             "fresh_subs_character"
                                             -6)
                                            (("2"
                                              (inst -6 "(a, X)")
                                              (("2"
                                                (rewrite "Subs_append")
                                                (("2"
                                                  (lemma
                                                   "fresh?_complete"
                                                   ("Delta"
                                                    "Delta"
                                                    "a"
                                                    "a"
                                                    "t"
                                                    "Subs(sigma)(Subs(gamma)((: :) * X))"))
                                                  (("2"
                                                    (assert)
                                                    (("2"
                                                      (assert)
                                                      (("2"
                                                        (flatten)
                                                        (("2"
                                                          (lemma
                                                           "Subs_fresh"
                                                           ("a"
                                                            "a"
                                                            "sigma"
                                                            "sigma"
                                                            "t"
                                                            "Subs(gamma)((: :) * X)"))
                                                          (("2"
                                                            (assert)
                                                            nil))))))))))))))))))))))))))))))))))))))))))))))))))))))))
    nil)
   nil nil)
  (fresh_subs_o_fresh_subs?-1 nil 3888066814 ("" (postpone) nil nil)
   nil shostak))
 (fresh_subs?_complete2 0
  (fresh_subs?_complete2-1 nil 3888146831
   ("" (skeep)
    (("" (assert)
      (("" (name-replace "b" "fresh_subs?(sigma, Nabla)`2")
        (("" (name-replace "Nabla1" "fresh_subs?(sigma, Nabla)`1")
          (("" (reveal -1 -2)
            (("" (flatten)
              (("" (lemma "fresh_subs_o_fresh_subs?")
                (("" (inst -1 "G" "Nabla" "sigma" "delta")
                  (("" (assert)
                    (("" (replace -2)
                      (("" (replace -3)
                        (("" (replace -1 :dir rl)
                          (("" (lemma "fresh_subs_equal")
                            ((""
                              (inst -1 "Nabla " "G" "delta"
                               "append(delta, sigma)")
                              (("" (assert) nil nil)) nil))
                            nil))
                          nil))
                        nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((fresh_context type-eq-decl nil freshness nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (perm type-eq-decl nil atoms nil) (atom type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil))
   shostak))
 (aux_lemma_fresh_sub1 0
  (aux_lemma_fresh_sub1-2 nil 3888759116
   ("" (induct "t")
    (("1" (skeep)
      (("1" (skeep) (("1" (hide -1) (("1" (grind) nil nil)) nil)) nil))
      nil)
     ("2" (skolem 1 ("pm" "V"))
      (("2" (skeep)
        (("2" (expand "fresh?" 1)
          (("2" (rewrite "subs_ext_pi")
            (("2" (expand "subs" -1)
              (("2" (expand "fresh_subs" 1)
                (("2" (prop)
                  (("1" (rewrite "ext_reverse_fresh") nil nil)
                   ("2" (hide -1) (("2" (grind) nil nil)) nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("3" (grind) nil nil)
     ("4" (skolem 1 ("p1" "p2"))
      (("4" (prop)
        (("4" (skeep)
          (("4" (rewrite "subs_pair")
            (("4" (expand "fresh?" 1)
              (("4" (expand "x")
                (("4" (lift-if)
                  (("4" (prop)
                    (("1" (hide -1 -2)
                      (("1" (rewrite "fresh_subs_append_context")
                        (("1" (grind) nil nil)) nil))
                      nil)
                     ("2" (hide-all-but 2) (("2" (grind) nil nil)) nil)
                     ("3" (hide-all-but 2) (("3" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("5" (skolem 1 ("f" "ag"))
      (("5" (prop)
        (("5" (skeep)
          (("5" (expand "fresh?" 1)
            (("5" (rewrite "subs_app")
              (("5" (expand "fresh" -2) (("5" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("6" (skolem 1 ("f" "ag"))
      (("6" (prop)
        (("6" (skeep)
          (("6" (expand "fresh?" 1)
            (("6" (rewrite "subs_ac")
              (("6" (expand "fresh" -2) (("6" (grind) nil nil)) nil))
              nil))
            nil))
          nil))
        nil))
      nil)
     ("7" (skeep)
      (("7" (skeep)
        (("7" (expand "fresh?" 1)
          (("7" (lift-if)
            (("7" (prop)
              (("1" (hide-all-but 1) (("1" (grind) nil nil)) nil)
               ("2" (hide 1)
                (("2" (rewrite "subs_abs")
                  (("2" (expand "fresh" -2)
                    (("2" (prop)
                      (("1" (reveal 1) (("1" (propax) nil nil)) nil)
                       ("2" (grind) nil nil))
                      nil))
                    nil))
                  nil))
                nil))
              nil))
            nil))
          nil))
        nil))
      nil))
    nil)
   ((subs_abs formula-decl nil substitution nil)
    (subs_ac formula-decl nil substitution nil)
    (subs_app formula-decl nil substitution nil)
    (x const-decl "[fresh_context, bool]" freshness nil)
    (subs_pair formula-decl nil substitution nil)
    (subs const-decl "term" substitution nil)
    (ext_reverse_fresh formula-decl nil freshness nil)
    (var? adt-recognizer-decl "[term -> boolean]" term_adt nil)
    (* adt-constructor-decl "[[perm, variable] -> (var?)]" term_adt
       nil)
    (subs_ext_pi formula-decl nil substitution nil)
    (term_induction formula-decl nil term_adt nil)
    (atom type-eq-decl nil atoms nil) (perm type-eq-decl nil atoms nil)
    (variable type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (fresh? def-decl "[fresh_context, bool]" freshness nil)
    (subs def-decl "term" substitution nil)
    (fresh def-decl "bool" freshness nil)
    (sub type-eq-decl nil substitution nil)
    (basic_sub type-eq-decl nil substitution nil)
    (fresh_context type-eq-decl nil freshness nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil))
   nil)
  (aux_lemma_fresh_sub1-1 nil 3888758801 ("" (postpone) nil nil) nil
   shostak))
 (fresh_alpha_equivalent 0
  (fresh_alpha_equivalent-1 nil 3888069215
   ("" (skeep)
    (("" (lemma "equal?_fresh")
      (("" (inst -1 "Nabla" "a" "s" "t") (("" (assert) nil nil)) nil))
      nil))
    nil)
   ((equal?_fresh formula-decl nil equality nil)
    (every adt-def-decl "boolean" term_adt nil)
    (term type-decl nil term_adt nil)
    (ac_symbol type-eq-decl nil term_properties nil)
    (f_symbol type-eq-decl nil term_properties nil)
    (perm type-eq-decl nil atoms nil)
    (fresh_context type-eq-decl nil freshness nil)
    (variable type-eq-decl nil term_properties nil)
    (atom type-eq-decl nil atoms nil))
   shostak)))

